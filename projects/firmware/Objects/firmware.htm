<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Wed Jan 23 16:44:10 2019
<BR><P>
<H3>Maximum Stack Usage =       1584 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
thread_main &rArr; ui_key_process &rArr; file_hex_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[265]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[731]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[731]">WM__InvalidateRect</a><BR>
 <LI><a href="#[714]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[714]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[70e]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70e]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[713]">WM_InvalidateWindowAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[713]">WM_InvalidateWindowAndDescs</a><BR>
 <LI><a href="#[6f5]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[579]">WM__SendMessage</a><BR>
 <LI><a href="#[6fa]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c0]">WM_DeleteWindow</a><BR>
 <LI><a href="#[73a]">_PopFreeBlock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[754]">_EnlargeBlocks</a><BR>
 <LI><a href="#[5a2]">_Alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a7]">_InitOnce</a><BR>
 <LI><a href="#[757]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[757]">_Findy1</a><BR>
 <LI><a href="#[759]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[759]">_Findx1</a><BR>
 <LI><a href="#[758]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[758]">_Findx0</a><BR>
 <LI><a href="#[736]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[736]">_PaintTransChildren</a><BR>
 <LI><a href="#[71a]">WM_ResizeWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e1]">WM__UpdateChildPositions</a><BR>
 <LI><a href="#[732]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[732]">_MoveDescendents</a><BR>
 <LI><a href="#[6ff]">WM__ForEachDesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6ff]">WM__ForEachDesc</a><BR>
 <LI><a href="#[701]">_GetDialogItem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[701]">_GetDialogItem</a><BR>
 <LI><a href="#[75f]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75f]">_Screen2hWin</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5d]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[de]">BUTTON_Callback</a> from button.o(i.BUTTON_Callback) referenced from button.o(i.BUTTON_CreateUser)
 <LI><a href="#[187]">BUTTON_CreateIndirect</a> from button.o(i.BUTTON_CreateIndirect) referenced 5 times from chipdlg.o(.rodata._aDialogCreate)
 <LI><a href="#[b]">BUTTON_DrawSkinFlex</a> from button_skinflex.o(i.BUTTON_DrawSkinFlex) referenced 2 times from button.o(.data)
 <LI><a href="#[45]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8b]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[99]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[83]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[84]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[85]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[86]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[87]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[90]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[91]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[88]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[89]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14c]">EraseChip</a> from spi_flash.o(.text.EraseChip) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[14b]">EraseSector</a> from spi_flash.o(.text.EraseSector) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[4f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[df]">FRAMEWIN_Callback</a> from framewin.o(i.FRAMEWIN_Callback) referenced from framewin.o(i.FRAMEWIN_CreateUser)
 <LI><a href="#[183]">FRAMEWIN_CreateIndirect</a> from framewin.o(i.FRAMEWIN_CreateIndirect) referenced from framewindlg.o(.rodata._aDialogCreate)
 <LI><a href="#[d]">FRAMEWIN_DrawSkinFlex</a> from framewin_skinflex.o(i.FRAMEWIN_DrawSkinFlex) referenced 4 times from framewin.o(.data)
 <LI><a href="#[c]">FRAMEWIN__GetBorderSize</a> from framewin.o(i.FRAMEWIN__GetBorderSize) referenced 2 times from framewin.o(.data)
 <LI><a href="#[e0]">FRAMEWIN__cbClient</a> from framewin.o(i.FRAMEWIN__cbClient) referenced from framewin.o(i.FRAMEWIN_CreateUser)
 <LI><a href="#[124]">GUIMONO_DispChar</a> from gui_charm.o(i.GUIMONO_DispChar) referenced from f6x8.o(.constdata)
 <LI><a href="#[125]">GUIMONO_GetCharDistX</a> from gui_charm.o(i.GUIMONO_GetCharDistX) referenced from f6x8.o(.constdata)
 <LI><a href="#[126]">GUIMONO_GetFontInfo</a> from gui_charm.o(i.GUIMONO_GetFontInfo) referenced from f6x8.o(.constdata)
 <LI><a href="#[127]">GUIMONO_IsInFont</a> from gui_charm.o(i.GUIMONO_IsInFont) referenced from f6x8.o(.constdata)
 <LI><a href="#[10d]">GUIPROP_DispChar</a> from gui_charp.o(i.GUIPROP_DispChar) referenced 3 times from f13b_1.o(.constdata)
 <LI><a href="#[10e]">GUIPROP_GetCharDistX</a> from gui_charp.o(i.GUIPROP_GetCharDistX) referenced 3 times from f13b_1.o(.constdata)
 <LI><a href="#[10f]">GUIPROP_GetFontInfo</a> from gui_charp.o(i.GUIPROP_GetFontInfo) referenced 3 times from f13b_1.o(.constdata)
 <LI><a href="#[110]">GUIPROP_IsInFont</a> from gui_charp.o(i.GUIPROP_IsInFont) referenced 3 times from f13b_1.o(.constdata)
 <LI><a href="#[f6]">GUI_DrawGradientH</a> from gui_drawgradient.o(i.GUI_DrawGradientH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[f9]">GUI_DrawGradientV</a> from gui_drawgradient.o(i.GUI_DrawGradientV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[105]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i._Paint1)
 <LI><a href="#[104]">GUI_MEMDEV__WriteToActiveAlpha</a> from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha) referenced from guidev_32.o(i._GetDevFunc)
 <LI><a href="#[103]">GUI_MEMDEV__WriteToActiveOpaque</a> from guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque) referenced from guidev_16.o(i._GetDevFunc)
 <LI><a href="#[e4]">GUI_TIMER_Exec</a> from gui_timer.o(i.GUI_TIMER_Exec) referenced from gui_timer.o(i.GUI_TIMER_Create)
 <LI><a href="#[13c]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[13b]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[13d]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(i.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[13f]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[15]">GUI_X_ExecIdle</a> from gui_x_os.o(.text.GUI_X_ExecIdle) referenced 2 times from gui_waitevent.o(.data)
 <LI><a href="#[20]">GUI__MixColors</a> from gui__alpha.o(i.GUI__MixColors) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[21]">GUI__MixColorsBulk</a> from gui__alpha.o(i.GUI__MixColorsBulk) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[145]">GetCapabilities</a> from spi_flash.o(.text.GetCapabilities) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[14e]">GetInfo</a> from spi_flash.o(.text.GetInfo) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[14d]">GetStatus</a> from spi_flash.o(.text.GetStatus) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[144]">GetVersion</a> from spi_flash.o(.text.GetVersion) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[182]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) referenced from spi_stm32f4xx.o(.rodata.SPI2_Resources)
 <LI><a href="#[182]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) referenced from spi_stm32f4xx.o(.rodata.SPI3_Resources)
 <LI><a href="#[181]">HAL_RCC_GetPCLK2Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) referenced from spi_stm32f4xx.o(.rodata.SPI1_Resources)
 <LI><a href="#[9a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[94]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[93]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[146]">Initialize</a> from spi_flash.o(.text.Initialize) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[2a]">LCD_AA_MixColors16</a> from lcd_aa.o(i.LCD_AA_MixColors16) referenced 2 times from lcd_aa.o(.data)
 <LI><a href="#[e3]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_core.o(.constdata)
 <LI><a href="#[e3]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_drawgradient.o(i.GUI_DrawGradientV)
 <LI><a href="#[107]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from gui_core.o(.constdata)
 <LI><a href="#[e2]">LCD_DrawVLine</a> from lcd.o(i.LCD_DrawVLine) referenced from gui_drawgradient.o(i.GUI_DrawGradientH)
 <LI><a href="#[9]">LCD_GetpPalConvTableBM</a> from lcd_color.o(i.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data)
 <LI><a href="#[e8]">LCD_Index2Color_888</a> from guicc_888_index2color.o(i.LCD_Index2Color_888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[e7]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[e7]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[e7]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guidev_writetoactivealpha.o(i._WriteToActiveAlpha)
 <LI><a href="#[109]">LCD_Index2Color_M565</a> from guicc_m565.o(i.LCD_Index2Color_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[eb]">LCD_SetPixelAA4_NoTrans</a> from lcd_aa.o(i.LCD_SetPixelAA4_NoTrans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[ec]">LCD_SetPixelAA4_Trans</a> from lcd_aa.o(i.LCD_SetPixelAA4_Trans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[ed]">LCD_SetPixelAA8_NoTrans</a> from lcd_aa.o(i.LCD_SetPixelAA8_NoTrans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[ee]">LCD_SetPixelAA8_Trans</a> from lcd_aa.o(i.LCD_SetPixelAA8_Trans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[ef]">MULTIPAGE_Callback</a> from multipage.o(i.MULTIPAGE_Callback) referenced from multipage.o(i.MULTIPAGE_CreateUser)
 <LI><a href="#[184]">MULTIPAGE_CreateIndirect</a> from multipage.o(i.MULTIPAGE_CreateIndirect) referenced from framewindlg.o(.rodata._aDialogCreate)
 <LI><a href="#[e]">MULTIPAGE_DrawSkinFlex</a> from multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex) referenced 2 times from multipage.o(.data)
 <LI><a href="#[10]">MULTIPAGE_SKIN__GetTabBarWidth</a> from multipage_skin.o(i.MULTIPAGE_SKIN__GetTabBarWidth) referenced 2 times from multipage.o(.data)
 <LI><a href="#[f]">MULTIPAGE_SKIN__GetTouchedPage</a> from multipage_skin.o(i.MULTIPAGE_SKIN__GetTouchedPage) referenced 2 times from multipage.o(.data)
 <LI><a href="#[f]">MULTIPAGE_SKIN__GetTouchedPage</a> from multipage_skin.o(i.MULTIPAGE_SKIN__GetTouchedPage) referenced from multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex)
 <LI><a href="#[f0]">MULTIPAGE__DrawTextItemH</a> from multipage_skinclassic.o(i.MULTIPAGE__DrawTextItemH) referenced from multipage.o(i.MULTIPAGE_CreateUser)
 <LI><a href="#[44]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b4]">NOR0_DriverEvent</a> from fs_config.o(.text.NOR0_DriverEvent) referenced 2 times from fs_config.o(.text.fs_config_flash)
 <LI><a href="#[8e]">OTG_FS_IRQHandler</a> from otg_fs_stm32f4xx.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[96]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[95]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[98]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[97]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[148]">PowerControl</a> from spi_flash.o(.text.PowerControl) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[14a]">ProgramData</a> from spi_flash.o(.text.ProgramData) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[f2]">RADIO_Callback</a> from radio.o(i.RADIO_Callback) referenced from radio.o(i.RADIO_CreateUser)
 <LI><a href="#[188]">RADIO_CreateIndirect</a> from radio.o(i.RADIO_CreateIndirect) referenced 5 times from configdlg.o(.rodata._aDialogCreate)
 <LI><a href="#[12]">RADIO_DrawSkinFlex</a> from radio_skinflex.o(i.RADIO_DrawSkinFlex) referenced 2 times from radio.o(.data)
 <LI><a href="#[11]">RADIO__GetButtonSize</a> from radio.o(i.RADIO__GetButtonSize) referenced 2 times from radio.o(.data)
 <LI><a href="#[50]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[149]">ReadData</a> from spi_flash.o(.text.ReadData) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[41]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f4]">SCROLLBAR_Callback</a> from scrollbar.o(i.SCROLLBAR_Callback) referenced from scrollbar.o(i.SCROLLBAR_CreateUser)
 <LI><a href="#[1f]">SCROLLBAR_DrawSkinFlex</a> from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex) referenced 2 times from scrollbar.o(.data)
 <LI><a href="#[7c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[158]">SPI1_Control</a> from spi_stm32f4xx.o(.text.SPI1_Control) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[157]">SPI1_GetDataCount</a> from spi_stm32f4xx.o(.text.SPI1_GetDataCount) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[159]">SPI1_GetStatus</a> from spi_stm32f4xx.o(.text.SPI1_GetStatus) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[6e]">SPI1_IRQHandler</a> from spi_stm32f4xx.o(.text.SPI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[151]">SPI1_Initialize</a> from spi_stm32f4xx.o(.text.SPI1_Initialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[153]">SPI1_PowerControl</a> from spi_stm32f4xx.o(.text.SPI1_PowerControl) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[155]">SPI1_Receive</a> from spi_stm32f4xx.o(.text.SPI1_Receive) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[154]">SPI1_Send</a> from spi_stm32f4xx.o(.text.SPI1_Send) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[156]">SPI1_Transfer</a> from spi_stm32f4xx.o(.text.SPI1_Transfer) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[152]">SPI1_Uninitialize</a> from spi_stm32f4xx.o(.text.SPI1_Uninitialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[161]">SPI2_Control</a> from spi_stm32f4xx.o(.text.SPI2_Control) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[160]">SPI2_GetDataCount</a> from spi_stm32f4xx.o(.text.SPI2_GetDataCount) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[162]">SPI2_GetStatus</a> from spi_stm32f4xx.o(.text.SPI2_GetStatus) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[6f]">SPI2_IRQHandler</a> from spi_stm32f4xx.o(.text.SPI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15a]">SPI2_Initialize</a> from spi_stm32f4xx.o(.text.SPI2_Initialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[15c]">SPI2_PowerControl</a> from spi_stm32f4xx.o(.text.SPI2_PowerControl) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[15e]">SPI2_Receive</a> from spi_stm32f4xx.o(.text.SPI2_Receive) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[15d]">SPI2_Send</a> from spi_stm32f4xx.o(.text.SPI2_Send) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[15f]">SPI2_Transfer</a> from spi_stm32f4xx.o(.text.SPI2_Transfer) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[15b]">SPI2_Uninitialize</a> from spi_stm32f4xx.o(.text.SPI2_Uninitialize) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[7e]">SPI3_IRQHandler</a> from spi_stm32f4xx.o(.text.SPI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[150]">SPIX_GetCapabilities</a> from spi_stm32f4xx.o(.text.SPIX_GetCapabilities) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[150]">SPIX_GetCapabilities</a> from spi_stm32f4xx.o(.text.SPIX_GetCapabilities) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[14f]">SPIX_GetVersion</a> from spi_stm32f4xx.o(.text.SPIX_GetVersion) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI1)
 <LI><a href="#[14f]">SPIX_GetVersion</a> from spi_stm32f4xx.o(.text.SPIX_GetVersion) referenced from spi_stm32f4xx.o(.rodata.Driver_SPI2)
 <LI><a href="#[47]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[4a]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9c]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[4d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[fb]">TEXT_Callback</a> from text.o(i.TEXT_Callback) referenced from text.o(i.TEXT_CreateUser)
 <LI><a href="#[185]">TEXT_CreateIndirect</a> from text.o(i.TEXT_CreateIndirect) referenced 85 times from framewindlg.o(.rodata._aDialogCreate)
 <LI><a href="#[63]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[81]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[82]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7f]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[80]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[92]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1bb]">USBD0_SignalDeviceEvent</a> from usbd_config_0.o(.text.USBD0_SignalDeviceEvent) referenced from usbd_config_0.o(.rodata.usbd_cb_device_event_ptr)
 <LI><a href="#[1bc]">USBD0_SignalEndpointEvent</a> from usbd_config_0.o(.text.USBD0_SignalEndpointEvent) referenced from usbd_config_0.o(.rodata.usbd_cb_endpoint_event_ptr)
 <LI><a href="#[a9]">USBD_Core_Thread</a> from usbd_lib_core.o(i.USBD_Core_Thread) referenced 2 times from usbd_config_0.o(.text.USBD_ThreadCreate)
 <LI><a href="#[1a7]">USBD_Device0_ConfigurationChanged</a> from usbd_config_0.o(.text.USBD_Device0_ConfigurationChanged) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_ConfigurationChanged)
 <LI><a href="#[1a8]">USBD_Device0_DisableRemoteWakeup</a> from usbd_config_0.o(.text.USBD_Device0_DisableRemoteWakeup) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_DisableRemoteWakeup)
 <LI><a href="#[1a9]">USBD_Device0_EnableRemoteWakeup</a> from usbd_config_0.o(.text.USBD_Device0_EnableRemoteWakeup) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_EnableRemoteWakeup)
 <LI><a href="#[1aa]">USBD_Device0_Endpoint0_InDataSent</a> from usbd_config_0.o(.text.USBD_Device0_Endpoint0_InDataSent) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_InDataSent)
 <LI><a href="#[1ab]">USBD_Device0_Endpoint0_OutDataReceived</a> from usbd_config_0.o(.text.USBD_Device0_Endpoint0_OutDataReceived) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_OutDataReceived)
 <LI><a href="#[1ac]">USBD_Device0_Endpoint0_SetupPacketProcessed</a> from usbd_config_0.o(.text.USBD_Device0_Endpoint0_SetupPacketProcessed) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_SetupPacketProcessed)
 <LI><a href="#[1ad]">USBD_Device0_Endpoint0_SetupPacketReceived</a> from usbd_config_0.o(.text.USBD_Device0_Endpoint0_SetupPacketReceived) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_SetupPacketReceived)
 <LI><a href="#[1ae]">USBD_Device0_HighSpeedActivated</a> from usbd_config_0.o(.text.USBD_Device0_HighSpeedActivated) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_HighSpeedActivated)
 <LI><a href="#[1af]">USBD_Device0_Initialize</a> from usbd_config_0.o(.text.USBD_Device0_Initialize) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Initialize)
 <LI><a href="#[1b0]">USBD_Device0_Reset</a> from usbd_config_0.o(.text.USBD_Device0_Reset) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Reset)
 <LI><a href="#[1b1]">USBD_Device0_Resumed</a> from usbd_config_0.o(.text.USBD_Device0_Resumed) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Resumed)
 <LI><a href="#[1b2]">USBD_Device0_Suspended</a> from usbd_config_0.o(.text.USBD_Device0_Suspended) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Suspended)
 <LI><a href="#[1b3]">USBD_Device0_Uninitialize</a> from usbd_config_0.o(.text.USBD_Device0_Uninitialize) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_Uninitialize)
 <LI><a href="#[1b4]">USBD_Device0_VbusChanged</a> from usbd_config_0.o(.text.USBD_Device0_VbusChanged) referenced from usbd_config_0.o(.rodata.fpUSBD_Device_VbusChanged)
 <LI><a href="#[168]">USBD_DeviceConnect</a> from usbd_fs_stm32f4xx.o(.text.USBD_DeviceConnect) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[169]">USBD_DeviceDisconnect</a> from usbd_fs_stm32f4xx.o(.text.USBD_DeviceDisconnect) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16a]">USBD_DeviceGetState</a> from usbd_fs_stm32f4xx.o(.text.USBD_DeviceGetState) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16b]">USBD_DeviceRemoteWakeup</a> from usbd_fs_stm32f4xx.o(.text.USBD_DeviceRemoteWakeup) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16c]">USBD_DeviceSetAddress</a> from usbd_fs_stm32f4xx.o(.text.USBD_DeviceSetAddress) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16e]">USBD_EndpointConfigure</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointConfigure) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[170]">USBD_EndpointStall</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointStall) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[171]">USBD_EndpointTransfer</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransfer) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[173]">USBD_EndpointTransferAbort</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransferAbort) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[172]">USBD_EndpointTransferGetResult</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransferGetResult) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16f]">USBD_EndpointUnconfigure</a> from usbd_fs_stm32f4xx.o(.text.USBD_EndpointUnconfigure) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[164]">USBD_GetCapabilities</a> from usbd_fs_stm32f4xx.o(.text.USBD_GetCapabilities) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[174]">USBD_GetFrameNumber</a> from usbd_fs_stm32f4xx.o(.text.USBD_GetFrameNumber) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[163]">USBD_GetVersion</a> from usbd_fs_stm32f4xx.o(.text.USBD_GetVersion) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[1b5]">USBD_HID0_GetProtocol</a> from usbd_config_0.o(.text.USBD_HID0_GetProtocol) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_GetProtocol)
 <LI><a href="#[1b6]">USBD_HID0_GetReport</a> from hid.o(.text.USBD_HID0_GetReport) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_GetReport)
 <LI><a href="#[1b7]">USBD_HID0_Initialize</a> from hid.o(.text.USBD_HID0_Initialize) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_Initialize)
 <LI><a href="#[1b8]">USBD_HID0_SetProtocol</a> from usbd_config_0.o(.text.USBD_HID0_SetProtocol) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_SetProtocol)
 <LI><a href="#[1b9]">USBD_HID0_SetReport</a> from hid.o(.text.USBD_HID0_SetReport) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_SetReport)
 <LI><a href="#[1ba]">USBD_HID0_Uninitialize</a> from hid.o(.text.USBD_HID0_Uninitialize) referenced from usbd_config_0.o(.rodata.fpUSBD_HID_Uninitialize)
 <LI><a href="#[aa]">USBD_HID_Thread</a> from usbd_lib_hid.o(i.USBD_HID_Thread) referenced 2 times from usbd_config_0.o(.text.USBD_ThreadCreate)
 <LI><a href="#[ab]">USBD_HID_Timer</a> from usbd_lib_hid.o(i.USBD_HID_Timer) referenced 2 times from usbd_config_0.o(.text.USBD_TimerCreate)
 <LI><a href="#[165]">USBD_Initialize</a> from usbd_fs_stm32f4xx.o(.text.USBD_Initialize) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[167]">USBD_PowerControl</a> from usbd_fs_stm32f4xx.o(.text.USBD_PowerControl) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[16d]">USBD_ReadSetupPacket</a> from usbd_fs_stm32f4xx.o(.text.USBD_ReadSetupPacket) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[166]">USBD_Uninitialize</a> from usbd_fs_stm32f4xx.o(.text.USBD_Uninitialize) referenced from usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
 <LI><a href="#[147]">Uninitialize</a> from spi_flash.o(.text.Uninitialize) referenced from spi_flash.o(.rodata.Driver_Flash0)
 <LI><a href="#[46]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[fc]">WINDOW_Callback</a> from window.o(i.WINDOW_Callback) referenced from window.o(i.WINDOW_CreateUser)
 <LI><a href="#[186]">WINDOW_CreateIndirect</a> from window.o(i.WINDOW_CreateIndirect) referenced 5 times from chipdlg.o(.rodata._aDialogCreate)
 <LI><a href="#[106]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i._Paint1)
 <LI><a href="#[4b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[102]">_CalcPositions</a> from scrollbar_skin.o(i._CalcPositions) referenced from scrollbar_skin.o(i._Create)
 <LI><a href="#[11f]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[f1]">_ClientCallback</a> from multipage.o(i._ClientCallback) referenced from multipage.o(i.MULTIPAGE_CreateUser)
 <LI><a href="#[10b]">_Color2IndexBulk</a> from guicc_m565.o(i._Color2IndexBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[128]">_Color2Index_0</a> from guicc_0.o(i._Color2Index_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[12b]">_Color2Index_8888</a> from guicc_8888.o(i._Color2Index_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[108]">_Color2Index_M565</a> from guicc_m565.o(i._Color2Index_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[17]">_Create</a> from button_skin.o(i._Create) referenced 10 times from button_skin.o(.data)
 <LI><a href="#[f8]">_DrawBackgroundH</a> from scrollbar_skinflex.o(i._DrawBackgroundH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[f5]">_DrawBackgroundV</a> from scrollbar_skinflex.o(i._DrawBackgroundV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[111]">_DrawBitmap</a> from guidev_16.o(i._DrawBitmap) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[175]">_DrawBitmap</a> from guidrv_template.o(.text._DrawBitmap) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[25]">_DrawBitmapCW</a> from lcd_rotatecw.o(i._DrawBitmapCW) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[142]">_DrawDown</a> from widget_effect_simple.o(i._DrawDown) referenced from widget_effect_simple.o(.constdata)
 <LI><a href="#[143]">_DrawDownRect</a> from widget_effect_simple.o(i._DrawDownRect) referenced from widget_effect_simple.o(.constdata)
 <LI><a href="#[fa]">_DrawGraspH</a> from scrollbar_skinflex.o(i._DrawGraspH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[f7]">_DrawGraspV</a> from scrollbar_skinflex.o(i._DrawGraspV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[112]">_DrawHLine</a> from guidev_16.o(i._DrawHLine) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[176]">_DrawHLine</a> from guidrv_template.o(.text._DrawHLine) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[140]">_DrawUp</a> from widget_effect_simple.o(i._DrawUp) referenced from widget_effect_simple.o(.constdata)
 <LI><a href="#[141]">_DrawUpRect</a> from widget_effect_simple.o(i._DrawUpRect) referenced from widget_effect_simple.o(.constdata)
 <LI><a href="#[113]">_DrawVLine</a> from guidev_16.o(i._DrawVLine) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[177]">_DrawVLine</a> from guidrv_template.o(.text._DrawVLine) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[120]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[114]">_FillRect</a> from guidev_16.o(i._FillRect) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[178]">_FillRect</a> from guidrv_template.o(.text._FillRect) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[13e]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(i._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[18]">_GetBorderSize</a> from framewin_skin.o(i._GetBorderSize) referenced 2 times from framewin_skin.o(.data)
 <LI><a href="#[11d]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[11e]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[23]">_GetCharWrap</a> from gui__wrap.o(i._GetCharWrap) referenced 2 times from gui__wrap.o(.data)
 <LI><a href="#[11b]">_GetDevData</a> from guidev_16.o(i._GetDevData) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17f]">_GetDevData</a> from guidrv_template.o(.text._GetDevData) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[119]">_GetDevFunc</a> from guidev_16.o(i._GetDevFunc) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17d]">_GetDevFunc</a> from guidrv_template.o(.text._GetDevFunc) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[11a]">_GetDevProp</a> from guidev_16.o(i._GetDevProp) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17e]">_GetDevProp</a> from guidrv_template.o(.text._GetDevProp) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[12a]">_GetIndexMask_0</a> from guicc_0.o(i._GetIndexMask_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[12c]">_GetIndexMask_8888</a> from guicc_8888.o(i._GetIndexMask_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[10a]">_GetIndexMask_M565</a> from guicc_m565.o(i._GetIndexMask_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[115]">_GetPixelIndex</a> from guidev_16.o(i._GetPixelIndex) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[179]">_GetPixelIndex</a> from guidrv_template.o(.text._GetPixelIndex) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[11c]">_GetRect</a> from guidev_16.o(i._GetRect) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[180]">_GetRect</a> from guidrv_template.o(.text._GetRect) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[22]">_GetWordWrap</a> from gui__wrap.o(i._GetWordWrap) referenced 2 times from gui__wrap.o(.data)
 <LI><a href="#[f3]">_HandleSetValue</a> from radio.o(i._HandleSetValue) referenced from radio.o(i.RADIO_SetGroupId)
 <LI><a href="#[10c]">_Index2ColorBulk</a> from guicc_m565.o(i._Index2ColorBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[129]">_Index2Color_0</a> from guicc_0.o(i._Index2Color_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[af]">_Init</a> from guidrv_template.o(.text._Init) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[24]">_Log2VisBuffered</a> from gui_charline.o(i._Log2VisBuffered) referenced 2 times from gui_charline.o(.data)
 <LI><a href="#[b1]">_Off</a> from guidrv_template.o(.text._Off) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[b0]">_On</a> from guidrv_template.o(.text._On) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[e1]">_OnExit</a> from gui_task.o(i._OnExit) referenced from gui_task.o(i.GUITASK_Init)
 <LI><a href="#[e5]">_OnExit</a> from gui_timer.o(i._OnExit) referenced from gui_timer.o(i.GUI_TIMER_Create)
 <LI><a href="#[e6]">_OnExit</a> from gui_core.o(i._OnExit) referenced from gui_core.o(i.GUI__Config)
 <LI><a href="#[e9]">_OnExit</a> from gui__alpha.o(i._OnExit) referenced from gui__alpha.o(i.GUI__GetAlphaBuffer)
 <LI><a href="#[ea]">_OnExit</a> from lcd_color.o(i._OnExit) referenced from lcd_color.o(i.LCD_InitColors)
 <LI><a href="#[ff]">_OnExit</a> from wm.o(i._OnExit) referenced from wm.o(i.WM_Init)
 <LI><a href="#[a]">_OnTouchDefault</a> from button.o(i._OnTouchDefault) referenced 2 times from button.o(.data)
 <LI><a href="#[16]">_Paint</a> from button_skin.o(i._Paint) referenced 10 times from button_skin.o(.data)
 <LI><a href="#[26]">_Rect2TextRect</a> from lcd_rotatecw.o(i._Rect2TextRect) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[122]">_SetBkColor</a> from lcd.o(i._SetBkColor) referenced from lcd.o(.constdata)
 <LI><a href="#[121]">_SetColor</a> from lcd.o(i._SetColor) referenced from lcd.o(.constdata)
 <LI><a href="#[123]">_SetDrawMode</a> from lcd.o(i._SetDrawMode) referenced from lcd.o(.constdata)
 <LI><a href="#[b2]">_SetLUTEntry</a> from guidrv_template.o(.text._SetLUTEntry) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[118]">_SetOrg</a> from guidev_16.o(i._SetOrg) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17c]">_SetOrg</a> from guidrv_template.o(.text._SetOrg) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[116]">_SetPixelIndex</a> from guidev_16.o(i._SetPixelIndex) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17a]">_SetPixelIndex</a> from guidrv_template.o(.text._SetPixelIndex) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[ae]">_SetSize</a> from guidrv_template.o(.text._SetSize) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[ac]">_SetVRAMAddr</a> from guidrv_template.o(.text._SetVRAMAddr) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[ad]">_SetVSize</a> from guidrv_template.o(.text._SetVSize) referenced 2 times from guidrv_template.o(.text._GetDevFunc)
 <LI><a href="#[27]">_TransformRect</a> from lcd_rotatecw.o(i._TransformRect) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[117]">_XorPixel</a> from guidev_16.o(i._XorPixel) referenced 2 times from guidev_16.o(.constdata)
 <LI><a href="#[17b]">_XorPixel</a> from guidrv_template.o(.text._XorPixel) referenced from guidrv_template.o(.rodata.GUIDRV_Template_API)
 <LI><a href="#[1bd]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[fe]">_cbBackWin</a> from wm.o(i._cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[a3]">_cbDialog</a> from cswritedlg.o(.text._cbDialog) referenced 2 times from cswritedlg.o(.text.CreateCSWrite)
 <LI><a href="#[a4]">_cbDialog</a> from chipdlg.o(.text._cbDialog) referenced 2 times from chipdlg.o(.text.CreateChip)
 <LI><a href="#[a5]">_cbDialog</a> from configdlg.o(.text._cbDialog) referenced 2 times from configdlg.o(.text.CreateConfig)
 <LI><a href="#[a6]">_cbDialog</a> from framewindlg.o(.text._cbDialog) referenced 2 times from framewindlg.o(.text.CreateFramewin)
 <LI><a href="#[a7]">_cbDialog</a> from hexdlg.o(.text._cbDialog) referenced 2 times from hexdlg.o(.text.CreateHex)
 <LI><a href="#[a8]">_cbDialog</a> from summarydlg.o(.text._cbDialog) referenced 2 times from summarydlg.o(.text.CreateSummary)
 <LI><a href="#[101]">_cbInvalidateOne</a> from wm_bringtotop.o(i._cbInvalidateOne) referenced from wm_bringtotop.o(i._BringToTop)
 <LI><a href="#[100]">_cbPaintMemDev</a> from wm.o(i._cbPaintMemDev) referenced from wm.o(i.WM__Paint)
 <LI><a href="#[fd]">_cbTimer</a> from wm_timer.o(i._cbTimer) referenced from wm_timer.o(i.WM_CreateTimer)
 <LI><a href="#[a2]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[a1]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[a0]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9f]">_snputc</a> from _snputc.o(.text) referenced from snprintf.o(.text)
 <LI><a href="#[9e]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[b3]">buzerr_timer_callback</a> from buzzer.o(.text.buzerr_timer_callback) referenced 2 times from buzzer.o(.text.buzzer_init)
 <LI><a href="#[18e]">csu8rp3228_adc_cali</a> from csu8rp3228.o(.text.csu8rp3228_adc_cali) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[18f]">csu8rp3228_blank_check</a> from csu8rp3228.o(.text.csu8rp3228_blank_check) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[190]">csu8rp3228_erase</a> from csu8rp3228.o(.text.csu8rp3228_erase) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[18b]">csu8rp3228_get_id</a> from csu8rp3228.o(.text.csu8rp3228_get_id) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[195]">csu8rp3228_get_size</a> from csu8rp3228.o(.text.csu8rp3228_get_size) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[18a]">csu8rp3228_hande_shake</a> from csu8rp3228.o(.text.csu8rp3228_hande_shake) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[189]">csu8rp3228_is_matched</a> from csu8rp3228.o(.text.csu8rp3228_is_matched) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[18c]">csu8rp3228_osc_cali</a> from csu8rp3228.o(.text.csu8rp3228_osc_cali) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[191]">csu8rp3228_program</a> from csu8rp3228.o(.text.csu8rp3228_program) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[192]">csu8rp3228_protect</a> from csu8rp3228.o(.text.csu8rp3228_protect) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[194]">csu8rp3228_readback</a> from csu8rp3228.o(.text.csu8rp3228_readback) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[193]">csu8rp3228_verify</a> from csu8rp3228.o(.text.csu8rp3228_verify) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[18d]">csu8rp3228_wdt_cali</a> from csu8rp3228.o(.text.csu8rp3228_wdt_cali) referenced from csu8rp3228.o(.rodata.csurp3228_ops)
 <LI><a href="#[2e]">file_cfg_close</a> from file_cfg.o(.text.file_cfg_close) referenced 2 times from files.o(.data.file_cfg_ops)
 <LI><a href="#[2b]">file_cfg_open</a> from file_cfg.o(.text.file_cfg_open) referenced 2 times from files.o(.data.file_cfg_ops)
 <LI><a href="#[2c]">file_cfg_read</a> from file_cfg.o(.text.file_cfg_read) referenced 2 times from files.o(.data.file_cfg_ops)
 <LI><a href="#[2f]">file_cfg_upgrade</a> from file_cfg.o(.text.file_cfg_upgrade) referenced 2 times from files.o(.data.file_cfg_ops)
 <LI><a href="#[2d]">file_cfg_write</a> from file_cfg.o(.text.file_cfg_write) referenced 2 times from files.o(.data.file_cfg_ops)
 <LI><a href="#[34]">file_dev_close</a> from file_dev.o(.text.file_dev_close) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[30]">file_dev_init</a> from file_dev.o(.text.file_dev_init) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[31]">file_dev_open</a> from file_dev.o(.text.file_dev_open) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[32]">file_dev_read</a> from file_dev.o(.text.file_dev_read) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[35]">file_dev_upgrade</a> from file_dev.o(.text.file_dev_upgrade) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[33]">file_dev_write</a> from file_dev.o(.text.file_dev_write) referenced 2 times from files.o(.data.file_dev_ops)
 <LI><a href="#[1a5]">file_firmware_close</a> from file_firmware.o(.text.file_firmware_close) referenced from files.o(.rodata.file_firmware_ops)
 <LI><a href="#[1a2]">file_firmware_open</a> from file_firmware.o(.text.file_firmware_open) referenced from files.o(.rodata.file_firmware_ops)
 <LI><a href="#[1a3]">file_firmware_read</a> from file_firmware.o(.text.file_firmware_read) referenced from files.o(.rodata.file_firmware_ops)
 <LI><a href="#[1a6]">file_firmware_upgrade</a> from file_firmware.o(.text.file_firmware_upgrade) referenced from files.o(.rodata.file_firmware_ops)
 <LI><a href="#[1a4]">file_firmware_write</a> from file_firmware.o(.text.file_firmware_write) referenced from files.o(.rodata.file_firmware_ops)
 <LI><a href="#[3a]">file_hex_close</a> from file_hex.o(.text.file_hex_close) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[36]">file_hex_init</a> from file_hex.o(.text.file_hex_init) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[37]">file_hex_open</a> from file_hex.o(.text.file_hex_open) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[38]">file_hex_read</a> from file_hex.o(.text.file_hex_read) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[3b]">file_hex_upgrade</a> from file_hex.o(.text.file_hex_upgrade) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[39]">file_hex_write</a> from file_hex.o(.text.file_hex_write) referenced 2 times from files.o(.data.file_hex_ops)
 <LI><a href="#[40]">file_ic_close</a> from file_ic.o(.text.file_ic_close) referenced 2 times from files.o(.data.file_ic_ops)
 <LI><a href="#[3f]">file_ic_get_size</a> from file_ic.o(.text.file_ic_get_size) referenced 2 times from files.o(.data.file_ic_ops)
 <LI><a href="#[3c]">file_ic_open</a> from file_ic.o(.text.file_ic_open) referenced 2 times from files.o(.data.file_ic_ops)
 <LI><a href="#[3d]">file_ic_read</a> from file_ic.o(.text.file_ic_read) referenced 2 times from files.o(.data.file_ic_ops)
 <LI><a href="#[3e]">file_ic_write</a> from file_ic.o(.text.file_ic_write) referenced 2 times from files.o(.data.file_ic_ops)
 <LI><a href="#[197]">get_capabilities</a> from i2c_sw.o(.text.get_capabilities) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[196]">get_version</a> from i2c_sw.o(.text.get_version) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[1a0]">i2c1_sw_control</a> from i2c_sw.o(.text.i2c1_sw_control) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19f]">i2c1_sw_get_data_count</a> from i2c_sw.o(.text.i2c1_sw_get_data_count) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[1a1]">i2c1_sw_get_status</a> from i2c_sw.o(.text.i2c1_sw_get_status) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[198]">i2c1_sw_initialize</a> from i2c_sw.o(.text.i2c1_sw_initialize) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19c]">i2c1_sw_master_receive</a> from i2c_sw.o(.text.i2c1_sw_master_receive) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19b]">i2c1_sw_master_transmit</a> from i2c_sw.o(.text.i2c1_sw_master_transmit) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19a]">i2c1_sw_power_control</a> from i2c_sw.o(.text.i2c1_sw_power_control) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19e]">i2c1_sw_slave_receive</a> from i2c_sw.o(.text.i2c1_sw_slave_receive) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[19d]">i2c1_sw_slave_transmit</a> from i2c_sw.o(.text.i2c1_sw_slave_transmit) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[199]">i2c1_sw_uninitialize</a> from i2c_sw.o(.text.i2c1_sw_uninitialize) referenced from i2c_sw.o(.rodata.driver_i2c1_sw)
 <LI><a href="#[d9]">lcd_back_light_timer_callback</a> from st7789v.o(.text.lcd_back_light_timer_callback) referenced 2 times from st7789v.o(.text.st7789v_init)
 <LI><a href="#[14]">memcpy</a> from memcpy.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[13]">memset</a> from memset.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[c5]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[da]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[db]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced 2 times from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[dd]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[c6]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[c7]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[dc]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[b8]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[b9]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[ba]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[bb]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[bc]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[bd]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[be]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[bf]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[c0]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[c1]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[c2]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[c3]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[c4]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[c8]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[c9]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[ca]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[cb]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced 2 times from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[cd]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[ce]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced 2 times from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[cf]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced 2 times from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[d0]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[d1]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[d2]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced 2 times from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[d3]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced 2 times from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[d4]">svcRtxTimerIsRunning</a> from rtx_timer.o(.text.svcRtxTimerIsRunning) referenced 2 times from rtx_timer.o(.text.osTimerIsRunning)
 <LI><a href="#[d5]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced 2 times from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[d6]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced 2 times from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[d7]">svcRtxTimerStop</a> from rtx_timer.o(.text.svcRtxTimerStop) referenced 2 times from rtx_timer.o(.text.osTimerStop)
 <LI><a href="#[b5]">thread_gui</a> from gui_main.o(.text.thread_gui) referenced 2 times from gui_main.o(.text.gui_init)
 <LI><a href="#[b7]">thread_key</a> from key.o(.text.thread_key) referenced 2 times from key.o(.text.key_init)
 <LI><a href="#[cc]">thread_main</a> from firmware.o(.text.thread_main) referenced 2 times from firmware.o(.text.osStart)
 <LI><a href="#[d8]">thread_protocol</a> from protcol.o(.text.thread_protocol) referenced 2 times from protcol.o(.text.protcol_init)
 <LI><a href="#[b6]">timer_callback</a> from key.o(.text.timer_callback) referenced 2 times from key.o(.text.key_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1bd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c2]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c4]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7a7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7a8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7a9]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7aa]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1c5]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[244]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[7ac]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1cf]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1da]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1db]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[7ad]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1df]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[7ae]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7af]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7b0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[7b1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7b2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7b3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7b4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[7b5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7b6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7b7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7b8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7b9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7ba]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7bb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7bc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[7bd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7be]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7bf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7c0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7c1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[7c2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1f4]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[7c3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[7c4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[7c5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[7c6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7c7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[7c8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1c3]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7c9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1f8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1fa]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; IsIrqMasked
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_USB_OTG_FS_PCD_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7ca]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[26b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[201]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[7cb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[203]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1f3]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[47]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[265]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[208]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = calloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_new
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_new
</UL>

<P><STRONG><a name="[20b]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[209]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[20f]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[210]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_destroy
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
</UL>

<P><STRONG><a name="[7cc]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_destroy
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_len
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramData
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
</UL>

<P><STRONG><a name="[213]"></a>fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_name
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_upgrade
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_program
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_upgrade
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_upgrade
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_read
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
</UL>

<P><STRONG><a name="[214]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
</UL>

<P><STRONG><a name="[216]"></a>snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[217]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[7cd]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[7ce]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[220]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_close
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_close
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_close
</UL>

<P><STRONG><a name="[221]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
</UL>

<P><STRONG><a name="[222]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[223]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[224]"></a>fgetpos</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fgetpos_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fgetpos &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
</UL>

<P><STRONG><a name="[227]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[228]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_open
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_open
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_open
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_open
</UL>

<P><STRONG><a name="[40a]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
</UL>

<P><STRONG><a name="[39c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[38d]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
</UL>

<P><STRONG><a name="[408]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_read
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[229]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7cf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[75e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[22b]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[7d0]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[22a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[7d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7d2]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7d3]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[22f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[230]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[22e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[7d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7d5]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[359]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[7d7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7d8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[234]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1ea]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[236]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[239]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[23b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[237]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[215]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> snprintf.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[241]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[242]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1de]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[23d]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[219]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetpos
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[7d9]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[246]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[21d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[249]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1f1]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[1f5]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[7da]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7db]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[22d]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[7dc]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ARM_get_argv &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[7dd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[7de]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[7df]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[7e0]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[7e1]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[7e2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc2.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[254]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[257]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[258]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[259]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[25a]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[25e]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[25c]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[268]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[7e3]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[26a]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[7e4]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setvbuf &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[260]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[23f]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[24a]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[235]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1f9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[261]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[1ec]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[1f7]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[256]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[212]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[250]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[267]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_read
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_read
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_read
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_read
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_read
</UL>

<P><STRONG><a name="[269]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_write
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_write
</UL>

<P><STRONG><a name="[25d]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[200]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[263]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[262]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[264]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[266]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[26c]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[45]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>CreateCSWrite</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cswritedlg.o(.text.CreateCSWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateCSWrite &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[271]"></a>CreateChip</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, chipdlg.o(.text.CreateChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateChip &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[272]"></a>CreateConfig</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, configdlg.o(.text.CreateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateConfig &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[273]"></a>CreateFramewin</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, framewindlg.o(.text.CreateFramewin))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateFramewin &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
</UL>

<P><STRONG><a name="[274]"></a>CreateHex</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hexdlg.o(.text.CreateHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateHex &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[275]"></a>CreateSummary</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, summarydlg.o(.text.CreateSummary))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CreateSummary &rArr; GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[48]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[497]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxEventFlagsWaitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[460]"></a>EvrRtxKernelError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[4f0]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[4f1]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[4f2]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[45f]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[4f3]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[462]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[4f7]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[470]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[477]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[47b]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[47f]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[474]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[476]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[49a]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4fa]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[41c]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[463]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[4f8]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMessageQueueGetPending
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[49b]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMessageQueueGetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[423]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueInsertPending
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[484]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueInserted
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[466]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[424]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueNotInserted
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[420]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueNotRetrieved
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[467]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[4fb]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMessageQueuePutPending
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[49c]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMessageQueuePutTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[41f]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMessageQueueRetrieved
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[468]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[4fe]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexAcquirePending
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[498]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexAcquireTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[488]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[501]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[46c]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[500]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[46b]"></a>EvrRtxMutexError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[46d]"></a>EvrRtxMutexNew</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[4ff]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexNotAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[46e]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[486]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxMutexReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[4b5]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[502]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[499]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[428]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[505]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[4b8]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[504]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxSemaphoreDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[427]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[4b9]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[429]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxSemaphoreNotAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[4ba]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[42c]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxSemaphoreReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxSemaphoreReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[4ac]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[50d]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[457]"></a>EvrRtxThreadDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[494]"></a>EvrRtxThreadDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[508]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[42f]"></a>EvrRtxThreadError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[4bb]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[4bc]"></a>EvrRtxThreadFlagsSet</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[431]"></a>EvrRtxThreadFlagsSetDone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsSetDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadFlagsSetDone
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[4bf]"></a>EvrRtxThreadFlagsWait</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[4a6]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[50a]"></a>EvrRtxThreadFlagsWaitNotCompleted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadFlagsWaitNotCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[509]"></a>EvrRtxThreadFlagsWaitPending</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadFlagsWaitPending
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[495]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[50b]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[506]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4c0]"></a>EvrRtxThreadNew</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[492]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[4aa]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[4c1]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[49d]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4c2]"></a>EvrRtxThreadYield</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[4b2]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxTimerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[50f]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxTimerCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[4c8]"></a>EvrRtxTimerError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[4c6]"></a>EvrRtxTimerIsRunning</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerIsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxTimerIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerIsRunning
</UL>

<P><STRONG><a name="[4c7]"></a>EvrRtxTimerNew</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, rtx_evr.o(.text.EvrRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EvrRtxTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[4c9]"></a>EvrRtxTimerStart</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[511]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxTimerStarted
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[4ca]"></a>EvrRtxTimerStop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>

<P><STRONG><a name="[512]"></a>EvrRtxTimerStopped</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerStopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EvrRtxTimerStopped
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
</UL>

<P><STRONG><a name="[279]"></a>GUI_X_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, guiconf.o(.text.GUI_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[15]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gui_x_os.o(.text.GUI_X_ExecIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_X_ExecIdle &rArr; osThreadYield &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_waitevent.o(.data)
</UL>
<P><STRONG><a name="[27d]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_x_os.o(.text.GUI_X_GetTaskId))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_X_GetTaskId &rArr; osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>

<P><STRONG><a name="[27f]"></a>GUI_X_GetTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_x_os.o(.text.GUI_X_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_X_GetTime &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>

<P><STRONG><a name="[5ef]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_os.o(.text.GUI_X_Init))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[281]"></a>GUI_X_InitOS</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_x_os.o(.text.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_X_InitOS &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[284]"></a>GUI_X_Lock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gui_x_os.o(.text.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[286]"></a>GUI_X_Unlock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gui_x_os.o(.text.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_X_Unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>

<P><STRONG><a name="[4d3]"></a>HAL_ADC_GetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>

<P><STRONG><a name="[4d4]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>

<P><STRONG><a name="[288]"></a>HAL_ADC_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[289]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, stm32f4xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[28c]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>

<P><STRONG><a name="[4d2]"></a>HAL_ADC_Start</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>

<P><STRONG><a name="[28e]"></a>HAL_CRC_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32f4xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[28f]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 176 bytes, Stack size 44 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[290]"></a>HAL_DAC_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[291]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[4d6]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 86 bytes, Stack size 52 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_setup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_setup
</UL>

<P><STRONG><a name="[4d7]"></a>HAL_DAC_Start</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_setup
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_setup
</UL>

<P><STRONG><a name="[292]"></a>HAL_DMA_Abort</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[293]"></a>HAL_Delay</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceRemoteWakeup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 590 bytes, Stack size 72 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitialize
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
</UL>

<P><STRONG><a name="[294]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, key.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[276]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[28b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 978 bytes, Stack size 68 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[51a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_switch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzerr_timer_callback
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back_light_set
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_transfer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_mem_write
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back_light_timer_callback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID0_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[28d]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_GetUID</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetUID
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
</UL>

<P><STRONG><a name="[298]"></a>HAL_I2C_Init</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[299]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[29a]"></a>HAL_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29c]"></a>HAL_InitTick</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[29d]"></a>HAL_MspInit</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[29f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[29b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_PCD_Init</STRONG> (Thumb, 582 bytes, Stack size 136 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_PCD_MspDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_PCD_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
</UL>

<P><STRONG><a name="[2af]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spi_stm32f4xx.o(.rodata.SPI2_Resources)
<LI> spi_stm32f4xx.o(.rodata.SPI3_Resources)
</UL>
<P><STRONG><a name="[181]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.SPI1_Resources)
</UL>
<P><STRONG><a name="[2b0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1650 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_SPI_Init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[29e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_UART_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[43]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c0]"></a>LCD_X_Config</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcdconf_flexcolor_template.o(.text.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[338]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lcdconf_flexcolor_template.o(.text.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_X_DisplayDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLUTEntry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[44]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4af]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[4f6]"></a>OS_Tick_Enable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4f5]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4f4]"></a>OS_Tick_Setup</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[8e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, otg_fs_stm32f4xx.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_FS_IRQ &rArr; USBD_WriteToFifo &rArr; USBD_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI3_IRQHandler &rArr; SPI_IRQHandler &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f8]"></a>SystemClock_Config</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>SystemInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2ba]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1bb]"></a>USBD0_SignalDeviceEvent</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD0_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = USBD0_SignalDeviceEvent &rArr; USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.usbd_cb_device_event_ptr)
</UL>
<P><STRONG><a name="[1bc]"></a>USBD0_SignalEndpointEvent</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD0_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = USBD0_SignalEndpointEvent &rArr; USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.usbd_cb_endpoint_event_ptr)
</UL>
<P><STRONG><a name="[301]"></a>USBD_ClassInitialize</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbd_config_0.o(.text.USBD_ClassInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_ClassInitialize &rArr; USBD_HID_Initialize &rArr; USBD_TimerCreate &rArr; osTimerNew &rArr; EvrRtxTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[303]"></a>USBD_ClassUninitialize</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbd_config_0.o(.text.USBD_ClassUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_ClassUninitialize &rArr; USBD_HID_Uninitialize &rArr; USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[6aa]"></a>USBD_Class_Endpoint0_InDataSent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Class_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Class_Endpoint0_InDataSent
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
</UL>

<P><STRONG><a name="[6ac]"></a>USBD_Class_Endpoint0_OutDataReceived</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Class_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Class_Endpoint0_OutDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
</UL>

<P><STRONG><a name="[6ae]"></a>USBD_Class_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Class_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Class_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
</UL>

<P><STRONG><a name="[6b0]"></a>USBD_Class_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Class_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Class_Endpoint0_SetupPacketReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
</UL>

<P><STRONG><a name="[305]"></a>USBD_Delay</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_Delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[1a7]"></a>USBD_Device0_ConfigurationChanged</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_ConfigurationChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_ConfigurationChanged
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_ConfigurationChanged)
</UL>
<P><STRONG><a name="[1a8]"></a>USBD_Device0_DisableRemoteWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_DisableRemoteWakeup))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_DisableRemoteWakeup)
</UL>
<P><STRONG><a name="[1a9]"></a>USBD_Device0_EnableRemoteWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_EnableRemoteWakeup))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_EnableRemoteWakeup)
</UL>
<P><STRONG><a name="[1aa]"></a>USBD_Device0_Endpoint0_InDataSent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_Endpoint0_InDataSent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_InDataSent)
</UL>
<P><STRONG><a name="[1ab]"></a>USBD_Device0_Endpoint0_OutDataReceived</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_Endpoint0_OutDataReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_OutDataReceived)
</UL>
<P><STRONG><a name="[1ac]"></a>USBD_Device0_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_SetupPacketProcessed)
</UL>
<P><STRONG><a name="[1ad]"></a>USBD_Device0_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD_Device0_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Device0_Endpoint0_SetupPacketReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Endpoint0_SetupPacketReceived)
</UL>
<P><STRONG><a name="[308]"></a>USBD_Device0_EventReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_EventReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Reset
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_Device0_HighSpeedActivated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_HighSpeedActivated))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_HighSpeedActivated)
</UL>
<P><STRONG><a name="[1af]"></a>USBD_Device0_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_Initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Initialize)
</UL>
<P><STRONG><a name="[1b0]"></a>USBD_Device0_Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_EventReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Reset)
</UL>
<P><STRONG><a name="[1b1]"></a>USBD_Device0_Resumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_Resumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Resumed)
</UL>
<P><STRONG><a name="[1b2]"></a>USBD_Device0_Suspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_Suspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Suspended)
</UL>
<P><STRONG><a name="[1b3]"></a>USBD_Device0_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_Device0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_Uninitialize)
</UL>
<P><STRONG><a name="[1b4]"></a>USBD_Device0_VbusChanged</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Device0_VbusChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_VbusChanged
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_Device_VbusChanged)
</UL>
<P><STRONG><a name="[6e0]"></a>USBD_Endpoint0_ClearFeatureStall_MSC</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_config_0.o(.text.USBD_Endpoint0_ClearFeatureStall_MSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_Endpoint0_ClearFeatureStall_MSC
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[6c4]"></a>USBD_Endpoint0_Out_ADC_ReqToEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Out_ADC_ReqToEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Out_ADC_ReqToEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c2]"></a>USBD_Endpoint0_Out_ADC_ReqToIF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Out_ADC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Out_ADC_ReqToIF
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c3]"></a>USBD_Endpoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Out_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Out_CDC_ReqToIF
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6de]"></a>USBD_Endpoint0_ReqGetExtProp_CC</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_config_0.o(.text.USBD_Endpoint0_ReqGetExtProp_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Endpoint0_ReqGetExtProp_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
</UL>

<P><STRONG><a name="[6cf]"></a>USBD_Endpoint0_Setup_ADC_ReqToEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Setup_ADC_ReqToEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Setup_ADC_ReqToEP
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6cd]"></a>USBD_Endpoint0_Setup_ADC_ReqToIF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Setup_ADC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Setup_ADC_ReqToIF
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6ce]"></a>USBD_Endpoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Setup_CDC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Setup_CDC_ReqToIF
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6cc]"></a>USBD_Endpoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_Endpoint0_Setup_MSC_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Endpoint0_Setup_MSC_ReqToIF
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[30b]"></a>USBD_EndpointStart</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[6df]"></a>USBD_EndpointStop</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_config_0.o(.text.USBD_EndpointStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EndpointStop
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[2e1]"></a>USBD_FS_IRQ</STRONG> (Thumb, 2248 bytes, Stack size 80 bytes, usbd_fs_stm32f4xx.o(.text.USBD_FS_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_FS_IRQ &rArr; USBD_WriteToFifo &rArr; USBD_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteToFifo
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadFromFifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceSetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_HID0_GetProtocol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(.text.USBD_HID0_GetProtocol))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_GetProtocol)
</UL>
<P><STRONG><a name="[1b6]"></a>USBD_HID0_GetReport</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, hid.o(.text.USBD_HID0_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_HID0_GetReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_GetReport)
</UL>
<P><STRONG><a name="[1b7]"></a>USBD_HID0_Initialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hid.o(.text.USBD_HID0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_HID0_Initialize &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_Initialize)
</UL>
<P><STRONG><a name="[1b8]"></a>USBD_HID0_SetProtocol</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_config_0.o(.text.USBD_HID0_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID0_SetProtocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_SetProtocol)
</UL>
<P><STRONG><a name="[1b9]"></a>USBD_HID0_SetReport</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, hid.o(.text.USBD_HID0_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = USBD_HID0_SetReport &rArr; setReport &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_SetReport)
</UL>
<P><STRONG><a name="[1ba]"></a>USBD_HID0_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hid.o(.text.USBD_HID0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.rodata.fpUSBD_HID_Uninitialize)
</UL>
<P><STRONG><a name="[311]"></a>USBD_Reset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_config_0.o(.text.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBD_Reset &rArr; USBD_HID_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[313]"></a>USBD_SemaphoreAcquire</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD_SemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_SemaphoreAcquire &rArr; osSemaphoreAcquire &rArr; isrRtxSemaphoreAcquire &rArr; SemaphoreTokenDecrement &rArr; atomic_dec16_nz
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[315]"></a>USBD_SemaphoreCreate</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, usbd_config_0.o(.text.USBD_SemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_SemaphoreCreate &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[316]"></a>USBD_SemaphoreDelete</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_SemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SemaphoreDelete &rArr; osSemaphoreDelete &rArr; EvrRtxSemaphoreError
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>

<P><STRONG><a name="[318]"></a>USBD_SemaphoreRelease</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_SemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[31a]"></a>USBD_SetConfiguration</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_SetConfiguration &rArr; USBD_HID_SetConfiguration &rArr; USBD_TimerStart &rArr; osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[31c]"></a>USBD_ThreadCreate</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, usbd_config_0.o(.text.USBD_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_ThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[31e]"></a>USBD_ThreadFlagsSet</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD_ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>

<P><STRONG><a name="[320]"></a>USBD_ThreadFlagsWait</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD_ThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_ThreadFlagsWait &rArr; osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[322]"></a>USBD_ThreadTerminate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_ThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>

<P><STRONG><a name="[324]"></a>USBD_TimerCreate</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, usbd_config_0.o(.text.USBD_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_TimerCreate &rArr; osTimerNew &rArr; EvrRtxTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[326]"></a>USBD_TimerStart</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_config_0.o(.text.USBD_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_TimerStart &rArr; osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
</UL>

<P><STRONG><a name="[328]"></a>USBD_TimerStop</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbd_config_0.o(.text.USBD_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_TimerStop &rArr; osTimerStop &rArr; EvrRtxTimerError
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
</UL>

<P><STRONG><a name="[2a9]"></a>USB_CoreInit</STRONG> (Thumb, 240 bytes, Stack size 120 bytes, stm32f4xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2ac]"></a>USB_DevDisconnect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2ab]"></a>USB_DevInit</STRONG> (Thumb, 640 bytes, Stack size 136 bytes, stm32f4xx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2a8]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[32d]"></a>USB_FlushRxFifo</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[32c]"></a>USB_FlushTxFifo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[2aa]"></a>USB_SetCurrentMode</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[32b]"></a>USB_SetDevSpeed</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_SetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[46]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c5]"></a>_Error_Handler</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[24e]"></a>__user_perthread_libspace</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtx_lib.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1bf]"></a>_mutex_acquire</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtx_lib.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetpos
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[1c1]"></a>_mutex_free</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rtx_lib.o(.text._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[1be]"></a>_mutex_initialize</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_lib.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mutex_initialize &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1c0]"></a>_mutex_release</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtx_lib.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetpos
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[1fb]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; IsIrqMasked
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[21e]"></a>_sys_close</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; efs_close &rArr; falloc_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[24d]"></a>_sys_command_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text._sys_command_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_command_string
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[204]"></a>_sys_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[21a]"></a>_sys_flen</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[218]"></a>_sys_istty</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[226]"></a>_sys_open</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; efs_open &rArr; file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[25b]"></a>_sys_read</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, retarget_io.o(.text._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdin_getchar
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[247]"></a>_sys_seek</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; efs_seek &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[248]"></a>_sys_write</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[26d]"></a>_ttywrch</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget_io.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ttywrch &rArr; ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[365]"></a>buzzer_init</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, buzzer.o(.text.buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = buzzer_init &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[36a]"></a>chip_program</STRONG> (Thumb, 1852 bytes, Stack size 272 bytes, program.o(.text.chip_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = chip_program &rArr; chip_program_is_valid &rArr; chip_program_is_power_ready &rArr; file_hex_get_voltage &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_get_num_ok
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip_ops
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_program
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_limit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_valid
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[371]"></a>chip_program_is_power_ready</STRONG> (Thumb, 1056 bytes, Stack size 168 bytes, program.o(.text.chip_program_is_power_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = chip_program_is_power_ready &rArr; file_hex_get_voltage &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_is_valid
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_valid
</UL>

<P><STRONG><a name="[36d]"></a>chip_program_is_valid</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, program.o(.text.chip_program_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = chip_program_is_valid &rArr; chip_program_is_power_ready &rArr; file_hex_get_voltage &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
</UL>

<P><STRONG><a name="[370]"></a>chip_program_power_off</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, program.o(.text.chip_program_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = chip_program_power_off &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_switch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
</UL>

<P><STRONG><a name="[375]"></a>chip_program_power_on</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, program.o(.text.chip_program_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = chip_program_power_on &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_switch
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
</UL>

<P><STRONG><a name="[369]"></a>crc32_sw_calc</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, crc32_soft.o(.text.crc32_sw_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc32_sw_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
</UL>

<P><STRONG><a name="[381]"></a>crc4_sw_calc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, crc4_soft.o(.text.crc4_sw_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc4_sw_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
</UL>

<P><STRONG><a name="[18e]"></a>csu8rp3228_adc_cali</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, csu8rp3228.o(.text.csu8rp3228_adc_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csu8rp3228_adc_cali
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[18f]"></a>csu8rp3228_blank_check</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, csu8rp3228.o(.text.csu8rp3228_blank_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_blank_check &rArr; cmd_config_ptm &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[190]"></a>csu8rp3228_erase</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, csu8rp3228.o(.text.csu8rp3228_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csu8rp3228_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[18b]"></a>csu8rp3228_get_id</STRONG> (Thumb, 814 bytes, Stack size 128 bytes, csu8rp3228.o(.text.csu8rp3228_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_get_id &rArr; file_hex_get_chip &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[195]"></a>csu8rp3228_get_size</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csu8rp3228.o(.text.csu8rp3228_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csu8rp3228_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[18c]"></a>csu8rp3228_osc_cali</STRONG> (Thumb, 1156 bytes, Stack size 176 bytes, csu8rp3228.o(.text.csu8rp3228_osc_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_osc_cali &rArr; file_hex_get_option &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clock_stop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[191]"></a>csu8rp3228_program</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, csu8rp3228.o(.text.csu8rp3228_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_program &rArr; program_with_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_rolling_code
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_option
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_end_program
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[192]"></a>csu8rp3228_protect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, csu8rp3228.o(.text.csu8rp3228_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csu8rp3228_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[194]"></a>csu8rp3228_readback</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, csu8rp3228.o(.text.csu8rp3228_readback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_readback &rArr; cmd_config_ptm &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[193]"></a>csu8rp3228_verify</STRONG> (Thumb, 178 bytes, Stack size 304 bytes, csu8rp3228.o(.text.csu8rp3228_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_verify &rArr; verify_without_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_rolling_code
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[18d]"></a>csu8rp3228_wdt_cali</STRONG> (Thumb, 1002 bytes, Stack size 144 bytes, csu8rp3228.o(.text.csu8rp3228_wdt_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_wdt_cali &rArr; cmd_osc_cali &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clock_stop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[3a0]"></a>cswrite_cfg_get_active_day</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_active_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cswrite_cfg_get_active_day
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
</UL>

<P><STRONG><a name="[399]"></a>cswrite_cfg_get_chip</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_get_chip &rArr; tlv_desc_new &rArr; calloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_new
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_name
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
</UL>

<P><STRONG><a name="[36b]"></a>cswrite_cfg_get_chip_ops</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_chip_ops))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
</UL>

<P><STRONG><a name="[3cf]"></a>cswrite_cfg_get_chip_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_chip_size))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_get_size
</UL>

<P><STRONG><a name="[39e]"></a>cswrite_cfg_get_id</STRONG> (Thumb, 968 bytes, Stack size 160 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_get_id &rArr; cswrite_cfg_get_serial_id &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_get_num_ok
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_get_num_failed
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_active_day
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
</UL>

<P><STRONG><a name="[392]"></a>cswrite_cfg_get_rolling_code</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_get_rolling_code &rArr; cswrite_cfg_save &rArr; fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[39f]"></a>cswrite_cfg_get_serial_id</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_serial_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_get_serial_id &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUID
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[3a4]"></a>cswrite_cfg_get_version</STRONG> (Thumb, 560 bytes, Stack size 96 bytes, cswrite_cfg.o(.text.cswrite_cfg_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_get_version &rArr; cswrite_get_version &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
</UL>

<P><STRONG><a name="[3a6]"></a>cswrite_cfg_load</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, cswrite_cfg.o(.text.cswrite_cfg_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_load &rArr; fram_map_cfg_read &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[3a8]"></a>cswrite_cfg_reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cswrite_cfg.o(.text.cswrite_cfg_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_reset &rArr; cswrite_cfg_save &rArr; fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[3aa]"></a>cswrite_cfg_set_active_date</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cswrite_cfg.o(.text.cswrite_cfg_set_active_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_set_active_date &rArr; cswrite_cfg_save &rArr; fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[53f]"></a>cswrite_cfg_set_chip</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, cswrite_cfg.o(.text.cswrite_cfg_set_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cswrite_cfg_set_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3ab]"></a>cswrite_cfg_set_rolling_code</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cswrite_cfg.o(.text.cswrite_cfg_set_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_set_rolling_code &rArr; cswrite_cfg_save &rArr; fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3a5]"></a>cswrite_get_version</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, cswrite_cfg.o(.text.cswrite_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cswrite_get_version &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[3a1]"></a>cswrite_log_get_num_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cswrite_log.o(.text.cswrite_log_get_num_failed))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
</UL>

<P><STRONG><a name="[36f]"></a>cswrite_log_get_num_ok</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cswrite_log.o(.text.cswrite_log_get_num_ok))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
</UL>

<P><STRONG><a name="[543]"></a>cswrite_log_set_hex_time</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, cswrite_log.o(.text.cswrite_log_set_hex_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cswrite_log_set_hex_time
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3ac]"></a>dbg_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dbg_print.o(.text.dbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dbg_init &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[296]"></a>dbg_lock</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dbg_print.o(.text.dbg_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dbg_lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_len
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_name
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_upgrade
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_program
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_upgrade
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_upgrade
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_read
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
</UL>

<P><STRONG><a name="[297]"></a>dbg_unlock</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dbg_print.o(.text.dbg_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_len
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_name
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_upgrade
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_program
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_upgrade
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_upgrade
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_read
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
</UL>

<P><STRONG><a name="[363]"></a>delay_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(.text.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_init &rArr; LL_TIM_SetAutoReload
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[377]"></a>delay_ms</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_ms &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
</UL>

<P><STRONG><a name="[376]"></a>delay_us</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, delay.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_nack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_ack
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[3b6]"></a>err_get_code</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, error.o(.text.err_get_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = err_get_code &rArr; osSemaphoreAcquire &rArr; isrRtxSemaphoreAcquire &rArr; SemaphoreTokenDecrement &rArr; atomic_dec16_nz
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
</UL>

<P><STRONG><a name="[3b7]"></a>err_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, error.o(.text.err_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = err_handler &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ok
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3ba]"></a>err_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, error.o(.text.err_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = err_init &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[763]"></a>fat_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs_config.o(.text.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[772]"></a>fat_delete</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, fs_config.o(.text.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[79a]"></a>fat_ffind</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, fs_config.o(.text.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[765]"></a>fat_flen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text.fat_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[79d]"></a>fat_format</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_config.o(.text.fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_format
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[79e]"></a>fat_free</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, fs_config.o(.text.fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[768]"></a>fat_handle_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(.text.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[7a2]"></a>fat_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs_config.o(.text.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[7a3]"></a>fat_mount</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fs_config.o(.text.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[769]"></a>fat_open</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, fs_config.o(.text.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_open
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[76c]"></a>fat_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_config.o(.text.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[7a4]"></a>fat_rename</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, fs_config.o(.text.fat_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[76e]"></a>fat_seek</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_config.o(.text.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[770]"></a>fat_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_config.o(.text.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[3bb]"></a>fdelete</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fs_config.o(.text.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fdelete &rArr; _fdelete &rArr; efs_delete &rArr; file_find &rArr; block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
</UL>

<P><STRONG><a name="[2e]"></a>file_cfg_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file_cfg.o(.text.file_cfg_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_cfg_close &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_cfg_ops)
</UL>
<P><STRONG><a name="[541]"></a>file_cfg_get_date</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, file_cfg.o(.text.file_cfg_get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_cfg_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[540]"></a>file_cfg_get_program</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, file_cfg.o(.text.file_cfg_get_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_cfg_get_program
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[542]"></a>file_cfg_get_time</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, file_cfg.o(.text.file_cfg_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_cfg_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3bd]"></a>file_cfg_load</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, file_cfg.o(.text.file_cfg_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = file_cfg_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_init
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[2b]"></a>file_cfg_open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file_cfg.o(.text.file_cfg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = file_cfg_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_cfg_ops)
</UL>
<P><STRONG><a name="[2c]"></a>file_cfg_read</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, file_cfg.o(.text.file_cfg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = file_cfg_read &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_cfg_ops)
</UL>
<P><STRONG><a name="[2f]"></a>file_cfg_upgrade</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, file_cfg.o(.text.file_cfg_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = file_cfg_upgrade &rArr; key_set &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_cfg_ops)
</UL>
<P><STRONG><a name="[2d]"></a>file_cfg_write</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, file_cfg.o(.text.file_cfg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = file_cfg_write &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_cfg_ops)
</UL>
<P><STRONG><a name="[3c1]"></a>file_close</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, files.o(.text.file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = file_close &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_dump
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
</UL>

<P><STRONG><a name="[3c3]"></a>file_code_open</STRONG> (Thumb, 676 bytes, Stack size 128 bytes, files.o(.text.file_code_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
</UL>

<P><STRONG><a name="[34]"></a>file_dev_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file_dev.o(.text.file_dev_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_dev_close &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[30]"></a>file_dev_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, file_dev.o(.text.file_dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = file_dev_init &rArr; file_dev_upgrade &rArr; tlv_file_pack &rArr; tlv_file_pack_desc &rArr; tlv_pack_desc_id &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[31]"></a>file_dev_open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file_dev.o(.text.file_dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = file_dev_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[32]"></a>file_dev_read</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_dev.o(.text.file_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_dev_read &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[35]"></a>file_dev_upgrade</STRONG> (Thumb, 416 bytes, Stack size 224 bytes, file_dev.o(.text.file_dev_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = file_dev_upgrade &rArr; tlv_file_pack &rArr; tlv_file_pack_desc &rArr; tlv_pack_desc_id &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[33]"></a>file_dev_write</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_dev.o(.text.file_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_dev_write &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_dev_ops)
</UL>
<P><STRONG><a name="[3c8]"></a>file_firmware_backup</STRONG> (Thumb, 584 bytes, Stack size 352 bytes, file_firmware.o(.text.file_firmware_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = file_firmware_backup &rArr; fdelete &rArr; _fdelete &rArr; efs_delete &rArr; file_find &rArr; block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[1a5]"></a>file_firmware_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file_firmware.o(.text.file_firmware_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_firmware_close &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.rodata.file_firmware_ops)
</UL>
<P><STRONG><a name="[1a2]"></a>file_firmware_open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file_firmware.o(.text.file_firmware_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = file_firmware_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.rodata.file_firmware_ops)
</UL>
<P><STRONG><a name="[1a3]"></a>file_firmware_read</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_firmware.o(.text.file_firmware_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_firmware_read &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.rodata.file_firmware_ops)
</UL>
<P><STRONG><a name="[1a6]"></a>file_firmware_upgrade</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, file_firmware.o(.text.file_firmware_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = file_firmware_upgrade &rArr; key_set &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.rodata.file_firmware_ops)
</UL>
<P><STRONG><a name="[1a4]"></a>file_firmware_write</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_firmware.o(.text.file_firmware_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_firmware_write &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.rodata.file_firmware_ops)
</UL>
<P><STRONG><a name="[3ca]"></a>file_get_pos</STRONG> (Thumb, 318 bytes, Stack size 80 bytes, files.o(.text.file_get_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = file_get_pos &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetpos
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
</UL>

<P><STRONG><a name="[3c5]"></a>file_get_size</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, files.o(.text.file_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = file_get_size &rArr; default_get_size &rArr; ffind &rArr; efs_ffind &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
</UL>

<P><STRONG><a name="[3a]"></a>file_hex_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file_hex.o(.text.file_hex_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_hex_close &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[3cb]"></a>file_hex_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, file_hex.o(.text.file_hex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = file_hex_free &rArr; tlv_file_destroy &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[38a]"></a>file_hex_get_chip</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, file_hex.o(.text.file_hex_get_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = file_hex_get_chip &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
</UL>

<P><STRONG><a name="[396]"></a>file_hex_get_code</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, file_hex.o(.text.file_hex_get_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = file_hex_get_code
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
</UL>

<P><STRONG><a name="[36e]"></a>file_hex_get_limit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, file_hex.o(.text.file_hex_get_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = file_hex_get_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
</UL>

<P><STRONG><a name="[390]"></a>file_hex_get_option</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, file_hex.o(.text.file_hex_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = file_hex_get_option &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[38f]"></a>file_hex_get_osc</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, file_hex.o(.text.file_hex_get_osc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = file_hex_get_osc &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[36c]"></a>file_hex_get_program</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, file_hex.o(.text.file_hex_get_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = file_hex_get_program &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
</UL>

<P><STRONG><a name="[3cd]"></a>file_hex_get_rolling_code</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, file_hex.o(.text.file_hex_get_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = file_hex_get_rolling_code &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
</UL>

<P><STRONG><a name="[372]"></a>file_hex_get_voltage</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, file_hex.o(.text.file_hex_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = file_hex_get_voltage &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
</UL>

<P><STRONG><a name="[36]"></a>file_hex_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, file_hex.o(.text.file_hex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = file_hex_init &rArr; file_hex_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[3ce]"></a>file_hex_load</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, file_hex.o(.text.file_hex_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = file_hex_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_init
</UL>

<P><STRONG><a name="[37]"></a>file_hex_open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file_hex.o(.text.file_hex_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = file_hex_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[38]"></a>file_hex_read</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_hex.o(.text.file_hex_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_hex_read &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[3b]"></a>file_hex_upgrade</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, file_hex.o(.text.file_hex_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = file_hex_upgrade &rArr; key_set &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[39]"></a>file_hex_write</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_hex.o(.text.file_hex_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_hex_write &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_hex_ops)
</UL>
<P><STRONG><a name="[40]"></a>file_ic_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file_ic.o(.text.file_ic_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_ic_close &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_ic_ops)
</UL>
<P><STRONG><a name="[3f]"></a>file_ic_get_size</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, file_ic.o(.text.file_ic_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = file_ic_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_ic_ops)
</UL>
<P><STRONG><a name="[3c]"></a>file_ic_open</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, file_ic.o(.text.file_ic_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = file_ic_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_ic_ops)
</UL>
<P><STRONG><a name="[3d]"></a>file_ic_read</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_ic.o(.text.file_ic_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_ic_read &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_ic_ops)
</UL>
<P><STRONG><a name="[3e]"></a>file_ic_write</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, file_ic.o(.text.file_ic_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = file_ic_write &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> files.o(.data.file_ic_ops)
</UL>
<P><STRONG><a name="[3d0]"></a>file_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, files.o(.text.file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = file_init &rArr; file_system_init &rArr; file_system_dir &rArr; dot_format &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[3d2]"></a>file_open</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, files.o(.text.file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = file_open &rArr; get_file_ext_by_id &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_dump
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
</UL>

<P><STRONG><a name="[3d3]"></a>file_read</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, files.o(.text.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_dump
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
</UL>

<P><STRONG><a name="[3d4]"></a>file_seek</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, files.o(.text.file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = file_seek &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
</UL>

<P><STRONG><a name="[3d8]"></a>file_system_dir</STRONG> (Thumb, 1396 bytes, Stack size 488 bytes, files.o(.text.file_system_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = file_system_dir &rArr; dot_format &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_format
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[3df]"></a>file_upgrade</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, files.o(.text.file_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = file_upgrade &rArr; get_file_ext_by_id &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
</UL>

<P><STRONG><a name="[3c6]"></a>file_verify</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, files.o(.text.file_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = file_verify &rArr; tlv_file_verify &rArr; tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
</UL>

<P><STRONG><a name="[3e1]"></a>file_write</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, files.o(.text.file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
</UL>

<P><STRONG><a name="[3e4]"></a>fram_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, mb85rcxx.o(.text.fram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_init
</UL>

<P><STRONG><a name="[3a7]"></a>fram_map_cfg_read</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, fram_map.o(.text.fram_map_cfg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fram_map_cfg_read &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_read
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
</UL>

<P><STRONG><a name="[3a9]"></a>fram_map_cfg_write</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, fram_map.o(.text.fram_map_cfg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>

<P><STRONG><a name="[366]"></a>fram_map_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fram_map.o(.text.fram_map_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fram_map_init &rArr; fram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[3e2]"></a>fram_read</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, mb85rcxx.o(.text.fram_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fram_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
</UL>

<P><STRONG><a name="[3e3]"></a>fram_write</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, mb85rcxx.o(.text.fram_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fram_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
</UL>

<P><STRONG><a name="[3e5]"></a>fs_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_config.o(.text.fs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fs_config &rArr; fs_config_flash &rArr; fs_mutex_new &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[3e8]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fs_config.o(.text.fs_get_rtos_tick_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[3e9]"></a>fs_mutex_acquire</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fs_config.o(.text.fs_mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fs_mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdefrag
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcheck
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanalyse
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3e7]"></a>fs_mutex_new</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_config.o(.text.fs_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fs_mutex_new &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_flash
</UL>

<P><STRONG><a name="[3ea]"></a>fs_mutex_release</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fs_config.o(.text.fs_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdefrag
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcheck
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanalyse
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3eb]"></a>fs_set_rtos_delay</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fs_config.o(.text.fs_set_rtos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_read
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>

<P><STRONG><a name="[3f5]"></a>get_status</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, i2c_sw.o(.text.get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_get_status
</UL>

<P><STRONG><a name="[3ec]"></a>gui_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_main.o(.text.gui_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gui_init &rArr; osThreadNew &rArr; EvrRtxThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[3ed]"></a>gui_key_process</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, gui_main.o(.text.gui_key_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = gui_key_process &rArr; GUI_SendKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendKeyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3ef]"></a>hid_read</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, hid.o(.text.hid_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = hid_read &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[3f1]"></a>hid_write</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, hid.o(.text.hid_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
</UL>

<P><STRONG><a name="[1a0]"></a>i2c1_sw_control</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, i2c_sw.o(.text.i2c1_sw_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c1_sw_control &rArr; control
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19f]"></a>i2c1_sw_get_data_count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_sw.o(.text.i2c1_sw_get_data_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_sw_get_data_count &rArr; get_data_count
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[1a1]"></a>i2c1_sw_get_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c_sw.o(.text.i2c1_sw_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c1_sw_get_status &rArr; get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[198]"></a>i2c1_sw_initialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_sw.o(.text.i2c1_sw_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = i2c1_sw_initialize &rArr; initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19c]"></a>i2c1_sw_master_receive</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, i2c_sw.o(.text.i2c1_sw_master_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = i2c1_sw_master_receive &rArr; master_receive &rArr; i2c_io_wait_ack &rArr; i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19b]"></a>i2c1_sw_master_transmit</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, i2c_sw.o(.text.i2c1_sw_master_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = i2c1_sw_master_transmit &rArr; master_transmit &rArr; i2c_io_wait_ack &rArr; i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19a]"></a>i2c1_sw_power_control</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2c_sw.o(.text.i2c1_sw_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c1_sw_power_control &rArr; power_control
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19e]"></a>i2c1_sw_slave_receive</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, i2c_sw.o(.text.i2c1_sw_slave_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c1_sw_slave_receive &rArr; slave_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[19d]"></a>i2c1_sw_slave_transmit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, i2c_sw.o(.text.i2c1_sw_slave_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c1_sw_slave_transmit &rArr; slave_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[199]"></a>i2c1_sw_uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_sw.o(.text.i2c1_sw_uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c1_sw_uninitialize &rArr; uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[402]"></a>i2c_io_read_byte</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, i2c_sw.o(.text.i2c_io_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i2c_io_read_byte &rArr; i2c_io_nack &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_nack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_ack
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
</UL>

<P><STRONG><a name="[404]"></a>i2c_io_send_byte</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, i2c_sw.o(.text.i2c_io_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_io_send_byte &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_transmit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
</UL>

<P><STRONG><a name="[367]"></a>key_init</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, key.o(.text.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = key_init &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[3c0]"></a>key_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key.o(.text.key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = key_set &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_upgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_upgrade
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_ic_open
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_upgrade
</UL>

<P><STRONG><a name="[43c]"></a>key_waiting</STRONG> (Thumb, 398 bytes, Stack size 80 bytes, key.o(.text.key_waiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = key_waiting &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[43d]"></a>lcd_back_light_set</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, st7789v.o(.text.lcd_back_light_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_back_light_set &rArr; osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[44d]"></a>led_set</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, led.o(.text.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = led_set &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_ok
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_failed
</UL>

<P><STRONG><a name="[1ff]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; MX_USB_OTG_FS_PCD_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStart
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_OTG_FS_PCD_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM13_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[307]"></a>osDelay</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelay
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_sleep_out
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_reset
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>

<P><STRONG><a name="[45a]"></a>osKernelGetState</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStart
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[280]"></a>osKernelGetTickCount</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
</UL>

<P><STRONG><a name="[306]"></a>osKernelGetTickFreq</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
</UL>

<P><STRONG><a name="[356]"></a>osKernelInitialize</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osKernelInitialize &rArr; IsIrqMasked
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStart
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[461]"></a>osKernelStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osKernelStart &rArr; IsIrqMasked
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStart
</UL>

<P><STRONG><a name="[3f0]"></a>osMessageQueueGet</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[43b]"></a>osMessageQueueNew</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[295]"></a>osMessageQueuePut</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[285]"></a>osMutexAcquire</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[355]"></a>osMutexDelete</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[282]"></a>osMutexNew</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[287]"></a>osMutexRelease</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[33d]"></a>osRtxErrorNotify</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[c5]"></a>osRtxIdleThread</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[45e]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_lib.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[46f]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[473]"></a>osRtxMemoryFree</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[475]"></a>osRtxMemoryInit</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[422]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; atomic_link_get
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_get
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[47a]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxMemoryPoolFree &rArr; atomic_link_put
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_link_put
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[47e]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[485]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[206]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageObject
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[41e]"></a>osRtxPostProcess</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[493]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelayCompleted
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[48e]"></a>osRtxThreadDispatch</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[481]"></a>osRtxThreadListGet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadListGet &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4a4]"></a>osRtxThreadListPut</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>

<P><STRONG><a name="[49e]"></a>osRtxThreadListRemove</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[4a5]"></a>osRtxThreadListSort</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[49f]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
</UL>

<P><STRONG><a name="[483]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadRegPtr &rArr; StackOffsetR0
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackOffsetR0
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4a8]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[4a9]"></a>osRtxThreadStartup</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[4a2]"></a>osRtxThreadSwitch</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4ab]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[482]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[207]"></a>osRtxTick_Handler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c6]"></a>osRtxTimerThread</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[314]"></a>osSemaphoreAcquire</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = osSemaphoreAcquire &rArr; isrRtxSemaphoreAcquire &rArr; SemaphoreTokenDecrement &rArr; atomic_dec16_nz
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_get_code
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
</UL>

<P><STRONG><a name="[317]"></a>osSemaphoreDelete</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osSemaphoreDelete &rArr; EvrRtxSemaphoreError
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
</UL>

<P><STRONG><a name="[283]"></a>osSemaphoreNew</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
</UL>

<P><STRONG><a name="[319]"></a>osSemaphoreRelease</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
</UL>

<P><STRONG><a name="[453]"></a>osStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, firmware.o(.text.osStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osStart &rArr; osThreadNew &rArr; EvrRtxThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>osThreadExit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[31f]"></a>osThreadFlagsSet</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>

<P><STRONG><a name="[321]"></a>osThreadFlagsWait</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadFlagsWait &rArr; EvrRtxThreadFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
</UL>

<P><STRONG><a name="[27e]"></a>osThreadGetId</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_len
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_read
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chip_name
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_upgrade
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_program
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_osc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_upgrade
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_upgrade
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_read
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_id
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_ext_by_fp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReport
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[31d]"></a>osThreadNew</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStart
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
</UL>

<P><STRONG><a name="[323]"></a>osThreadTerminate</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
</UL>

<P><STRONG><a name="[27c]"></a>osThreadYield</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osThreadYield &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_ExecIdle
</UL>

<P><STRONG><a name="[4c3]"></a>osTimerIsRunning</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, rtx_timer.o(.text.osTimerIsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osTimerIsRunning &rArr; EvrRtxTimerIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerIsRunning
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[325]"></a>osTimerNew</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osTimerNew &rArr; EvrRtxTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerCreate
</UL>

<P><STRONG><a name="[327]"></a>osTimerStart</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back_light_set
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
</UL>

<P><STRONG><a name="[329]"></a>osTimerStop</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, rtx_timer.o(.text.osTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osTimerStop &rArr; EvrRtxTimerError
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStop
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
</UL>

<P><STRONG><a name="[409]"></a>power_voltage_get</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, power.o(.text.power_voltage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = power_voltage_get &rArr; power_ctrl_vpp_readback &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_is_valid
</UL>

<P><STRONG><a name="[4db]"></a>power_voltage_set</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, power.o(.text.power_voltage_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = power_voltage_set &rArr; power_ctrl_vpp_readback &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_setup
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vpp_readback
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_setup
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_ctrl_vdd_readback
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
</UL>

<P><STRONG><a name="[374]"></a>power_voltage_switch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, power.o(.text.power_voltage_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = power_voltage_switch &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_off
</UL>

<P><STRONG><a name="[395]"></a>program_option</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, csu8rp3228.o(.text.program_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = program_option &rArr; cmd_program_mem &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[4dd]"></a>protcol_init</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, protcol.o(.text.protcol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = protcol_init &rArr; usb_hid_init &rArr; USBD_Uninitialize &rArr; USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[33b]"></a>st7789v_draw_point</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, st7789v.o(.text.st7789v_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_window
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_mem_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>

<P><STRONG><a name="[335]"></a>st7789v_fill</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, st7789v.o(.text.st7789v_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = st7789v_fill &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_window
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_mem_write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[364]"></a>st7789v_init</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, st7789v.o(.text.st7789v_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = st7789v_init &rArr; lcd_ctrl_read_id &rArr; lcd_io_transfer &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back_light_set
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_view_port_enable
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_vcom_set
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_sleep_out
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_reset
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_read_id
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_power
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_positive_vol_gamma_ctrl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_pixel_format
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_negative_vol_gamma_ctrl
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_display_on
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[336]"></a>st7789v_read_point</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, st7789v.o(.text.st7789v_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = st7789v_read_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_window
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>

<P><STRONG><a name="[32f]"></a>st7789v_set_cursor</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, st7789v.o(.text.st7789v_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = st7789v_set_cursor &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP
</UL>

<P><STRONG><a name="[4ec]"></a>st7789v_set_window</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, st7789v.o(.text.st7789v_set_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_read_point
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_fill
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_draw_point
</UL>

<P><STRONG><a name="[35f]"></a>stderr_putchar</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, retarget.o(.text.stderr_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[35b]"></a>stdin_getchar</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(.text.stdin_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[35e]"></a>stdout_putchar</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, retarget.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[b5]"></a>thread_gui</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gui_main.o(.text.thread_gui))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = thread_gui &rArr; GUI_ExecCreatedDialog &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ExecCreatedDialog
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_main.o(.text.gui_init)
</UL>
<P><STRONG><a name="[b7]"></a>thread_key</STRONG> (Thumb, 488 bytes, Stack size 104 bytes, key.o(.text.thread_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = thread_key &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.key_init)
</UL>
<P><STRONG><a name="[cc]"></a>thread_main</STRONG> (Thumb, 888 bytes, Stack size 152 bytes, firmware.o(.text.thread_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = thread_main &rArr; ui_key_process &rArr; file_hex_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_waiting
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_reset
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware.o(.text.osStart)
</UL>
<P><STRONG><a name="[d8]"></a>thread_protocol</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, protcol.o(.text.thread_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = thread_protocol &rArr; unpack &rArr; request_send_parser &rArr; file_verify &rArr; tlv_file_verify &rArr; tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_read
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protcol.o(.text.protcol_init)
</UL>
<P><STRONG><a name="[3cc]"></a>tlv_file_destroy</STRONG> (Thumb, 1298 bytes, Stack size 224 bytes, tlv.o(.text.tlv_file_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tlv_file_destroy &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_free
</UL>

<P><STRONG><a name="[3be]"></a>tlv_file_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tlv.o(.text.tlv_file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlv_file_init &rArr; INIT_LIST_HEAD
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_load
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
</UL>

<P><STRONG><a name="[3c7]"></a>tlv_file_pack</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, tlv.o(.text.tlv_file_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = tlv_file_pack &rArr; tlv_file_pack_desc &rArr; tlv_pack_desc_id &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_dump
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_append_crc32
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_dev_upgrade
</UL>

<P><STRONG><a name="[3bf]"></a>tlv_file_unpack</STRONG> (Thumb, 3170 bytes, Stack size 432 bytes, tlv.o(.text.tlv_file_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_load
</UL>

<P><STRONG><a name="[3e0]"></a>tlv_file_verify</STRONG> (Thumb, 588 bytes, Stack size 120 bytes, tlv.o(.text.tlv_file_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tlv_file_verify &rArr; tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_dump
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_crc32
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
</UL>

<P><STRONG><a name="[361]"></a>ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text.ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[518]"></a>ui_key_process</STRONG> (Thumb, 1122 bytes, Stack size 320 bytes, ui.o(.text.ui_key_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = ui_key_process &rArr; file_hex_load &rArr; tlv_file_unpack &rArr; tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_set
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_key_process
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_load
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_free
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_load
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_get_time
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_get_program
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_cfg_get_date
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_handler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_set_hex_time
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_rolling_code
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_chip
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_active_date
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_setup
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[4de]"></a>usb_hid_init</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, hid.o(.text.usb_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = usb_hid_init &rArr; USBD_Uninitialize &rArr; USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetState
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protcol_init
</UL>

<P><STRONG><a name="[277]"></a>w25qxx_chip_erase</STRONG> (Thumb, 778 bytes, Stack size 144 bytes, w25qxx.o(.text.w25qxx_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = w25qxx_chip_erase &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseChip
</UL>

<P><STRONG><a name="[278]"></a>w25qxx_erase_sector</STRONG> (Thumb, 808 bytes, Stack size 152 bytes, w25qxx.o(.text.w25qxx_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = w25qxx_erase_sector &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[2be]"></a>w25qxx_init</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, w25qxx.o(.text.w25qxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = w25qxx_init &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2bf]"></a>w25qxx_open</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, w25qxx.o(.text.w25qxx_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = w25qxx_open &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>

<P><STRONG><a name="[2e2]"></a>w25qxx_power_control</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, w25qxx.o(.text.w25qxx_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = w25qxx_power_control &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[2e3]"></a>w25qxx_program</STRONG> (Thumb, 534 bytes, Stack size 128 bytes, w25qxx.o(.text.w25qxx_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = w25qxx_program &rArr; page_program &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramData
</UL>

<P><STRONG><a name="[2e4]"></a>w25qxx_read</STRONG> (Thumb, 606 bytes, Stack size 128 bytes, w25qxx.o(.text.w25qxx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = w25qxx_read &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[251]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[554]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[553]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[555]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[556]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[252]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[253]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[557]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[de]"></a>BUTTON_Callback</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, button.o(i.BUTTON_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = BUTTON_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.BUTTON_CreateUser)
</UL>
<P><STRONG><a name="[187]"></a>BUTTON_CreateIndirect</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, button.o(i.BUTTON_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = BUTTON_CreateIndirect &rArr; BUTTON_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
</UL>
<BR>[Address Reference Count : 4]<UL><LI> chipdlg.o(.rodata._aDialogCreate)
<LI> configdlg.o(.rodata._aDialogCreate)
<LI> summarydlg.o(.rodata._aDialogCreate)
<LI> hexdlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[560]"></a>BUTTON_CreateUser</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, button.o(i.BUTTON_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = BUTTON_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
</UL>

<P><STRONG><a name="[b]"></a>BUTTON_DrawSkinFlex</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, button_skinflex.o(i.BUTTON_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = BUTTON_DrawSkinFlex &rArr; GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[34c]"></a>BUTTON_SetFont</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, button.o(i.BUTTON_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BUTTON_SetFont &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[55f]"></a>BUTTON_SetPressed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, button.o(i.BUTTON_SetPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[561]"></a>BUTTON_SetText</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, button.o(i.BUTTON_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = BUTTON_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateIndirect
</UL>

<P><STRONG><a name="[df]"></a>FRAMEWIN_Callback</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, framewin.o(i.FRAMEWIN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetActive
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin.o(i.FRAMEWIN_CreateUser)
</UL>
<P><STRONG><a name="[183]"></a>FRAMEWIN_CreateIndirect</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, framewin.o(i.FRAMEWIN_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_CreateIndirect &rArr; FRAMEWIN_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[57f]"></a>FRAMEWIN_CreateUser</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, framewin.o(i.FRAMEWIN_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateIndirect
</UL>

<P><STRONG><a name="[d]"></a>FRAMEWIN_DrawSkinFlex</STRONG> (Thumb, 888 bytes, Stack size 104 bytes, framewin_skinflex.o(i.FRAMEWIN_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_DrawSkinFlex &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Address Reference Count : 2]<UL><LI> framewin.o(.data)
<LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[581]"></a>FRAMEWIN_GetActive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, framewin.o(i.FRAMEWIN_GetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_GetActive &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[57a]"></a>FRAMEWIN_SetActive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, framewin.o(i.FRAMEWIN_SetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_SetActive &rArr; _SetActive &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[33e]"></a>FRAMEWIN_SetText</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, framewin.o(i.FRAMEWIN_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
</UL>

<P><STRONG><a name="[578]"></a>FRAMEWIN__CalcPositions</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, framewin.o(i.FRAMEWIN__CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN__CalcPositions &rArr; FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[588]"></a>FRAMEWIN__CalcTitleHeight</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, framewin.o(i.FRAMEWIN__CalcTitleHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FRAMEWIN__CalcTitleHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[c]"></a>FRAMEWIN__GetBorderSize</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, framewin.o(i.FRAMEWIN__GetBorderSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FRAMEWIN__GetBorderSize
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin.o(.data)
</UL>
<P><STRONG><a name="[58a]"></a>FRAMEWIN__GetTitleLimits</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, framewin.o(i.FRAMEWIN__GetTitleLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[590]"></a>GL_SetDefault</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_common.o(i.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>

<P><STRONG><a name="[124]"></a>GUIMONO_DispChar</STRONG> (Thumb, 302 bytes, Stack size 104 bytes, gui_charm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>GUIPROP_DispChar</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, gui_charp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13b_1.o(.constdata)
<LI> f24b_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gui_charp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13b_1.o(.constdata)
<LI> f24b_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 3]<UL><LI> f13b_1.o(.constdata)
<LI> f24b_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gui_charp.o(i.GUIPROP_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 3]<UL><LI> f13b_1.o(.constdata)
<LI> f24b_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[599]"></a>GUIPROP__FindChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP__FindChar))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[59c]"></a>GUITASK_CopyContext</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gui_task.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUITASK_CopyContext &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[59e]"></a>GUITASK_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[5a0]"></a>GUI_ALLOC_AllocInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_AllocInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocInit &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
</UL>

<P><STRONG><a name="[5a1]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[5a3]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_alloc.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Create
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
</UL>

<P><STRONG><a name="[27a]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[5a4]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
</UL>

<P><STRONG><a name="[5c4]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[55b]"></a>GUI_ALLOC_FreePtr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_FreePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[55c]"></a>GUI_ALLOC_FreePtrArray</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_alloc.o(i.GUI_ALLOC_FreePtrArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_FreePtrArray &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[339]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[5aa]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_GetMaxSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
</UL>

<P><STRONG><a name="[5ad]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
</UL>

<P><STRONG><a name="[637]"></a>GUI_ALLOC_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[559]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_LockH))
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetSelection
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetValue
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTabBarWidth
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DeleteScrollbar
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetActive
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteTimer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[5ac]"></a>GUI_ALLOC_Realloc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Realloc &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
</UL>

<P><STRONG><a name="[5ae]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_RequestSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[639]"></a>GUI_ALLOC_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[55a]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetSelection
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetValue
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTabBarWidth
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DeleteScrollbar
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetActive
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteTimer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[5ab]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextChild
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
</UL>

<P><STRONG><a name="[5af]"></a>GUI_ARRAY_AddItem</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, gui_array.o(i.GUI_ARRAY_AddItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_ARRAY_AddItem &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
</UL>

<P><STRONG><a name="[5b0]"></a>GUI_ARRAY_Create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_array.o(i.GUI_ARRAY_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_ARRAY_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
</UL>

<P><STRONG><a name="[5b1]"></a>GUI_ARRAY_Delete</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gui_array.o(i.GUI_ARRAY_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_ARRAY_Delete &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[5b2]"></a>GUI_ARRAY_DeleteItem</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gui_array_deleteitem.o(i.GUI_ARRAY_DeleteItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_ARRAY_DeleteItem &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
</UL>

<P><STRONG><a name="[5b3]"></a>GUI_ARRAY_GetNumItems</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY_GetNumItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_ARRAY_GetNumItems
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTabBarWidth
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5b4]"></a>GUI_ARRAY_GetpItemLocked</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY_GetpItemLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_ARRAY_GetpItemLocked &rArr; GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5b6]"></a>GUI_ARRAY_SetItem</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gui_array.o(i.GUI_ARRAY_SetItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_ARRAY_SetItem &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
</UL>

<P><STRONG><a name="[5b7]"></a>GUI_ARRAY__GethItem</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY__GethItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
</UL>

<P><STRONG><a name="[5b5]"></a>GUI_ARRAY__GetpItemLocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_array.o(i.GUI_ARRAY__GetpItemLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
</UL>

<P><STRONG><a name="[73e]"></a>GUI_CalcColorDist</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_common.o(i.GUI_CalcColorDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_CalcColorDist
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[515]"></a>GUI_Clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_core.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[514]"></a>GUI_ClearKeyBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_onkey.o(i.GUI_ClearKeyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_ClearKeyBuffer &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncReadPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
</UL>

<P><STRONG><a name="[5b9]"></a>GUI_ClearRect</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gui_core.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[270]"></a>GUI_CreateDialogBox</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dialog.o(i.GUI_CreateDialogBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GUI_CreateDialogBox &rArr; WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientWindow
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSummary
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateChip
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCSWrite
</UL>

<P><STRONG><a name="[5c1]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[2c1]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[5c3]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[5c2]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[5c5]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_device.o(i.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_LinkDevices &rArr; GUI_DEVICE_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[665]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gui_device.o(i.GUI_DEVICE_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DEVICE_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[5f9]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[601]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[56d]"></a>GUI_DRAW__Draw</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gui_draw.o(i.GUI_DRAW__Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_DRAW__Draw
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
</UL>

<P><STRONG><a name="[5c6]"></a>GUI_DRAW__GetXSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_draw.o(i.GUI_DRAW__GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DRAW__GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5c7]"></a>GUI_DRAW__GetYSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_draw.o(i.GUI_DRAW__GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DRAW__GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5c8]"></a>GUI_DispString</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[5cf]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstring.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
</UL>

<P><STRONG><a name="[572]"></a>GUI_DispStringInRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_dispstring.o(i.GUI_DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[5d1]"></a>GUI_DispStringInRectEx</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, gui_dispstringinrectex.o(i.GUI_DispStringInRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
</UL>

<P><STRONG><a name="[5d0]"></a>GUI_DispStringInRectMax</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_dispstring.o(i.GUI_DispStringInRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[5d6]"></a>GUI_DispStringInRectWrap</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, gui_dispstring.o(i.GUI_DispStringInRectWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRectWrap &rArr; GUI_WrapGetNumLines &rArr; GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5da]"></a>GUI_DrawFocusRect</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gui_drawlib.o(i.GUI_DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_DrawFocusRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
</UL>

<P><STRONG><a name="[f6]"></a>GUI_DrawGradientH</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, gui_drawgradient.o(i.GUI_DrawGradientH))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[f9]"></a>GUI_DrawGradientV</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, gui_drawgradient.o(i.GUI_DrawGradientV))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[568]"></a>GUI_DrawHLine</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, gui_drawlib.o(i.GUI_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspV
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>

<P><STRONG><a name="[583]"></a>GUI_DrawPixel</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gui_drawlib.o(i.GUI_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_DrawPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>

<P><STRONG><a name="[56b]"></a>GUI_DrawRect</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gui_2dlib.o(i.GUI_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>

<P><STRONG><a name="[569]"></a>GUI_DrawVLine</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_drawlib.o(i.GUI_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspH
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>

<P><STRONG><a name="[5dd]"></a>GUI_Exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(i.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ExecCreatedDialog
</UL>

<P><STRONG><a name="[5de]"></a>GUI_Exec1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_common.o(i.GUI_Exec1))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[516]"></a>GUI_ExecCreatedDialog</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dialog.o(i.GUI_ExecCreatedDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = GUI_ExecCreatedDialog &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDialogStatusPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
</UL>

<P><STRONG><a name="[56a]"></a>GUI_FillRect</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui_drawlib.o(i.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
</UL>

<P><STRONG><a name="[584]"></a>GUI_FillRectEx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_drawlib.o(i.GUI_FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
</UL>

<P><STRONG><a name="[643]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[59b]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[5e4]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
</UL>

<P><STRONG><a name="[5e5]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_char.o(i.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>

<P><STRONG><a name="[56f]"></a>GUI_GetClientRect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_common.o(i.GUI_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[59a]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>

<P><STRONG><a name="[5c9]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5e8]"></a>GUI_GetFontInfo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GetFontInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontInfo &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5e9]"></a>GUI_GetOrg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_GetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5eb]"></a>GUI_GetStringDistX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_dispstring.o(i.GUI_GetStringDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5ed]"></a>GUI_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_time.o(i.GUI_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetTime &rArr; GUI_X_GetTime &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
</UL>

<P><STRONG><a name="[5ca]"></a>GUI_GetYAdjust</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[58b]"></a>GUI_GetYSizeOfFont</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_common.o(i.GUI_GetYSizeOfFont))
<BR><BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjustRect
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
</UL>

<P><STRONG><a name="[762]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[644]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[5b8]"></a>GUI_GotoXY</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[513]"></a>GUI_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gui_core.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_gui
</UL>

<P><STRONG><a name="[562]"></a>GUI_Lock</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gui_task.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetSelection
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWinEx
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetValue
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetActive
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
</UL>

<P><STRONG><a name="[5fa]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guidev_clear.o(i.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5fb]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5fc]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCDAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[600]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, guidev.o(i.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[603]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[606]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, guidev_banding.o(i.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Min
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[610]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[612]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidev_getdataptr.o(i.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[60c]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_getysize.o(i.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[105]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i._Paint1)
</UL>
<P><STRONG><a name="[60e]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_reduceysize.o(i.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5ff]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Select &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[60f]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, guidev_setorg.o(i.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[614]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_write.o(i.GUI_MEMDEV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Write &rArr; GUI_MEMDEV_WriteAt &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[618]"></a>GUI_MEMDEV_WriteAt</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, guidev_write.o(i.GUI_MEMDEV_WriteAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_WriteAt &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[602]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, guidev.o(i.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>

<P><STRONG><a name="[104]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[619]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[103]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[71b]"></a>GUI_MergeRect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_common.o(i.GUI_MergeRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[570]"></a>GUI_MoveRect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_common.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[61e]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_onkey.o(i.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncReadPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>

<P><STRONG><a name="[620]"></a>GUI_ReadRectEx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lcd_readrect.o(i.GUI_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[724]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[622]"></a>GUI_RestoreContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>

<P><STRONG><a name="[623]"></a>GUI_SaveContext_W</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_common.o(i.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>

<P><STRONG><a name="[604]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[5fd]"></a>GUI_SelectLayer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[3ee]"></a>GUI_SendKeyMsg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_onkey.o(i.GUI_SendKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_SendKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_key_process
</UL>

<P><STRONG><a name="[591]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[567]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspV
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspH
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>

<P><STRONG><a name="[27b]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[5e0]"></a>GUI_SetDialogStatusPtr</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, dialog.o(i.GUI_SetDialogStatusPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = GUI_SetDialogStatusPtr &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ExecCreatedDialog
</UL>

<P><STRONG><a name="[594]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[56e]"></a>GUI_SetFont</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[595]"></a>GUI_SetLineStyle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetLineStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetLineStyle &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[5f7]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[592]"></a>GUI_SetPenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[593]"></a>GUI_SetTextAlign</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextAlign &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[571]"></a>GUI_SetTextMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[629]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[628]"></a>GUI_StoreKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[625]"></a>GUI_StoreKeyMsg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_onkey.o(i.GUI_StoreKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_StoreKeyMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendKeyMsg
</UL>

<P><STRONG><a name="[62b]"></a>GUI_TIMER_Create</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gui_timer.o(i.GUI_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
</UL>

<P><STRONG><a name="[62d]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_timer.o(i.GUI_TIMER_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
</UL>

<P><STRONG><a name="[e4]"></a>GUI_TIMER_Exec</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gui_timer.o(i.GUI_TIMER_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Exec &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_timer.o(i.GUI_TIMER_Create)
</UL>
<P><STRONG><a name="[630]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[631]"></a>GUI_TIMER_Restart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Restart &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
</UL>

<P><STRONG><a name="[632]"></a>GUI_TIMER_SetPeriod</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_SetPeriod &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
</UL>

<P><STRONG><a name="[633]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetFirstTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[634]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetNextTimerLin
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[635]"></a>GUI_TIMER__GetPeriod</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER__GetPeriod &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[636]"></a>GUI_TIMER__IsActive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_timer.o(i.GUI_TIMER__IsActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER__IsActive &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[64b]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
</UL>

<P><STRONG><a name="[5ce]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[744]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[61a]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[605]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[565]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetSelection
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocInit
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWinEx
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetValue
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetActive
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
</UL>

<P><STRONG><a name="[5e1]"></a>GUI_WaitEvent</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gui_waitevent.o(i.GUI_WaitEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI_WaitEvent &rArr; GUI_TIMER__GetPeriod &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WaitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ExecCreatedDialog
</UL>

<P><STRONG><a name="[5d7]"></a>GUI_WrapGetNumLines</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_dispstring.o(i.GUI_WrapGetNumLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GUI_WrapGetNumLines &rArr; GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[63a]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui__alpha.o(i.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[63c]"></a>GUI__AlphaPreserveTrans</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_setalpha.o(i.GUI__AlphaPreserveTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaPreserveTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[740]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
</UL>

<P><STRONG><a name="[63e]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__CompactPixelIndicesEx &rArr; GUI__ConvertColor2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[5ee]"></a>GUI__Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_core.o(i.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[63f]"></a>GUI__ConvertColor2Index</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, gui__compactpixelindices.o(i.GUI__ConvertColor2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
</UL>

<P><STRONG><a name="[5cd]"></a>GUI__DispLine</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[5d5]"></a>GUI__DispStringInRect</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gui_dispstring.o(i.GUI__DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[73c]"></a>GUI__DivideRound32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__private.o(i.GUI__DivideRound32))
<BR><BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[642]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 446 bytes, Stack size 104 bytes, gui__alpha.o(i.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[582]"></a>GUI__DrawTwinArc2</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i.GUI__DrawTwinArc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI__DrawTwinArc2 &rArr; _DrawTwinArc2 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[566]"></a>GUI__DrawTwinArc4</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, gui__drawtwinarc.o(i.GUI__DrawTwinArc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[645]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, gui__expandpixelindices.o(i.GUI__ExpandPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[648]"></a>GUI__FillTrippleArc</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i.GUI__FillTrippleArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI__FillTrippleArc &rArr; _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
</UL>

<P><STRONG><a name="[63b]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gui__alpha.o(i.GUI__GetAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>

<P><STRONG><a name="[5cc]"></a>GUI__GetLineDistX</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[5cb]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>

<P><STRONG><a name="[5ec]"></a>GUI__GetNumChars</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_uc.o(i.GUI__GetNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>

<P><STRONG><a name="[5ea]"></a>GUI__GetOrg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_common.o(i.GUI__GetOrg))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
</UL>

<P><STRONG><a name="[64c]"></a>GUI__GetOverlap</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_charline.o(i.GUI__GetOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[641]"></a>GUI__HandleEOLine</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui__private.o(i.GUI__HandleEOLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__HandleEOLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[710]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui__private.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[5d3]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gui__private.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[64d]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(i.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[64e]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, gui__managecache.o(i.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[20]"></a>GUI__MixColors</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gui__alpha.o(i.GUI__MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gui__alpha.o(i.GUI__MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[5db]"></a>GUI__ReduceRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__private.o(i.GUI__ReduceRect))
<BR><BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
</UL>

<P><STRONG><a name="[59f]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_core.o(i.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
</UL>

<P><STRONG><a name="[576]"></a>GUI__SetText</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gui__private.o(i.GUI__SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI__SetText &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strlen
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
</UL>

<P><STRONG><a name="[5d9]"></a>GUI__WrapGetNumBytesToNextLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui__wrap.o(i.GUI__WrapGetNumBytesToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[5d8]"></a>GUI__WrapGetNumCharsDisp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui__wrap.o(i.GUI__WrapGetNumCharsDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI__WrapGetNumCharsDisp &rArr; _WrapGetNumCharsDisp &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[651]"></a>GUI__WrapGetNumCharsToNextLine</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gui__wrap.o(i.GUI__WrapGetNumCharsToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
</UL>

<P><STRONG><a name="[755]"></a>GUI__memset16</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui__private.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[75c]"></a>GUI__sqrt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__private.o(i.GUI__sqrt32))
<BR><BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTrippleArcPara
</UL>

<P><STRONG><a name="[653]"></a>GUI__strcmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui__private.o(i.GUI__strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
</UL>

<P><STRONG><a name="[64f]"></a>GUI__strcmp_hp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui__private.o(i.GUI__strcmp_hp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__strcmp_hp
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[650]"></a>GUI__strlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui__private.o(i.GUI__strlen))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[2a]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd_aa.o(i.LCD_AA_MixColors16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_AA_MixColors16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.data)
</UL>
<P><STRONG><a name="[667]"></a>LCD_AA_MixColors256</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_aa.o(i.LCD_AA_MixColors256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors256
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[63d]"></a>LCD_AA_SetAndMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD_AA_SetAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>

<P><STRONG><a name="[661]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
</UL>

<P><STRONG><a name="[597]"></a>LCD_DrawBitmap</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[e3]"></a>LCD_DrawHLine</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_core.o(.constdata)
<LI> gui_drawgradient.o(i.GUI_DrawGradientV)
</UL>
<P><STRONG><a name="[107]"></a>LCD_DrawPixel</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>LCD_DrawVLine</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawgradient.o(i.GUI_DrawGradientH)
</UL>
<P><STRONG><a name="[598]"></a>LCD_FillRect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[654]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[5e2]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[5e7]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[656]"></a>LCD_GetNumColors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[657]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[658]"></a>LCD_GetNumLayers</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(i.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[659]"></a>LCD_GetPalette</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[65a]"></a>LCD_GetPaletteEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_getex.o(i.LCD_GetPaletteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
</UL>

<P><STRONG><a name="[65b]"></a>LCD_GetPixelColor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_getpixelcolor.o(i.LCD_GetPixelColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
</UL>

<P><STRONG><a name="[65c]"></a>LCD_GetPixelIndex</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd_getp.o(i.LCD_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>

<P><STRONG><a name="[609]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[64a]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetVXSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[60a]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[65e]"></a>LCD_GetXSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSize &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>

<P><STRONG><a name="[5f2]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[607]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5f5]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetXSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[65f]"></a>LCD_GetYSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSize &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>

<P><STRONG><a name="[5f3]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[608]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[5f4]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetYSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[9]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_color.o(i.LCD_GetpPalConvTableBM))
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data)
</UL>
<P><STRONG><a name="[660]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTableUncached), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[5e3]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
</UL>

<P><STRONG><a name="[e8]"></a>LCD_Index2Color_888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_888_index2color.o(i.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
</UL>
<P><STRONG><a name="[e7]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888_index2color.o(i.LCD_Index2Color_8888))
<BR>[Address Reference Count : 3]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
<LI> guicc_8888.o(.constdata)
<LI> guidev_writetoactivealpha.o(i._WriteToActiveAlpha)
</UL>
<P><STRONG><a name="[109]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guicc_m565.o(i.LCD_Index2Color_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Index2Color_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[662]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_color.o(i.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[663]"></a>LCD_InitLUT</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lcd_color.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_InitLUT &rArr; LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[624]"></a>LCD_SelectLCD</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SelectLCD &rArr; GUI_DEVICE_Unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[58e]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[669]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
</UL>

<P><STRONG><a name="[666]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[617]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[626]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>

<P><STRONG><a name="[668]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
</UL>

<P><STRONG><a name="[5f6]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[596]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[664]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[eb]"></a>LCD_SetPixelAA4_NoTrans</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA4_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_SetPixelAA4_NoTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[ec]"></a>LCD_SetPixelAA4_Trans</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA4_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetPixelAA4_Trans &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[ed]"></a>LCD_SetPixelAA8_NoTrans</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA8_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetPixelAA8_NoTrans &rArr; LCD_AA_MixColors256
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[ee]"></a>LCD_SetPixelAA8_Trans</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA8_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetPixelAA8_Trans &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[2c2]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2c3]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[616]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[66a]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, lcd.o(i.LCD__DrawBitmap_1bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[33a]"></a>LCD__GetBPP</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD__GetBPP))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>

<P><STRONG><a name="[611]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd_getex.o(i.LCD__GetBPPDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD__GetBPPDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[74b]"></a>LCD__GetPfSetPixel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD__GetPfSetPixel))
<BR><BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[340]"></a>MULTIPAGE_AddEmptyPage</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, multipage.o(i.MULTIPAGE_AddEmptyPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_AddEmptyPage &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindowAt
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[342]"></a>MULTIPAGE_AttachWindow</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, multipage.o(i.MULTIPAGE_AttachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_AttachWindow &rArr; WM_AttachWindowAt &rArr; WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindowAt
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[ef]"></a>MULTIPAGE_Callback</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, multipage.o(i.MULTIPAGE_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_Callback &rArr; _OnTouch &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetEffect
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_GetValue
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage.o(i.MULTIPAGE_CreateUser)
</UL>
<P><STRONG><a name="[184]"></a>MULTIPAGE_CreateIndirect</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, multipage.o(i.MULTIPAGE_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_CreateIndirect &rArr; MULTIPAGE_CreateUser &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[675]"></a>MULTIPAGE_CreateUser</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, multipage.o(i.MULTIPAGE_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_CreateUser &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Create
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateIndirect
</UL>

<P><STRONG><a name="[674]"></a>MULTIPAGE_DeletePage</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, multipage.o(i.MULTIPAGE_DeletePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_DeletePage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_DeleteItem
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[e]"></a>MULTIPAGE_DrawSkinFlex</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_DrawSkinFlex &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage.o(.data)
</UL>
<P><STRONG><a name="[677]"></a>MULTIPAGE_GetFont</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE_GetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_GetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
</UL>

<P><STRONG><a name="[551]"></a>MULTIPAGE_GetSelection</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE_GetSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_GetSelection &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
</UL>

<P><STRONG><a name="[552]"></a>MULTIPAGE_GetWindow</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, multipage.o(i.MULTIPAGE_GetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_GetWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
</UL>

<P><STRONG><a name="[678]"></a>MULTIPAGE_IsPageEnabled</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE_IsPageEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_IsPageEnabled &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[67a]"></a>MULTIPAGE_SKIN__GetPagePos</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, multipage_skin.o(i.MULTIPAGE_SKIN__GetPagePos))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_SKIN__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTabBarWidth
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[10]"></a>MULTIPAGE_SKIN__GetTabBarWidth</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, multipage_skin.o(i.MULTIPAGE_SKIN__GetTabBarWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_SKIN__GetTabBarWidth &rArr; MULTIPAGE_SKIN__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>MULTIPAGE_SKIN__GetTouchedPage</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, multipage_skin.o(i.MULTIPAGE_SKIN__GetTouchedPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_SKIN__GetTouchedPage &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBetween
</UL>
<BR>[Address Reference Count : 2]<UL><LI> multipage.o(.data)
<LI> multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex)
</UL>
<P><STRONG><a name="[343]"></a>MULTIPAGE_SelectPage</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, multipage.o(i.MULTIPAGE_SelectPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitConfig
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>

<P><STRONG><a name="[67e]"></a>MULTIPAGE__CalcBorderRect</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE__CalcBorderRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MULTIPAGE__CalcBorderRect &rArr; _AdjustRect
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjustRect
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[670]"></a>MULTIPAGE__CalcClientRect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE__CalcClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MULTIPAGE__CalcClientRect &rArr; WIDGET__GetInsideRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjustRect
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[682]"></a>MULTIPAGE__DeleteScrollbar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE__DeleteScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__DeleteScrollbar &rArr; _GetScrollbarH &rArr; WM_GetId &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
</UL>

<P><STRONG><a name="[f0]"></a>MULTIPAGE__DrawTextItemH</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, multipage_skinclassic.o(i.MULTIPAGE__DrawTextItemH))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__DrawTextItemH &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage.o(i.MULTIPAGE_CreateUser)
</UL>
<P><STRONG><a name="[67b]"></a>MULTIPAGE__GetPageWidth</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, multipage.o(i.MULTIPAGE__GetPageWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[67c]"></a>MULTIPAGE__GetTabBarRect</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, multipage.o(i.MULTIPAGE__GetTabBarRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MULTIPAGE__GetTabBarRect &rArr; MULTIPAGE__CalcBorderRect &rArr; _AdjustRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[673]"></a>MULTIPAGE__UpdatePositions</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, multipage.o(i.MULTIPAGE__UpdatePositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DeleteScrollbar
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[688]"></a>RADIO_AddValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, radio.o(i.RADIO_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Inc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Dec
</UL>

<P><STRONG><a name="[f2]"></a>RADIO_Callback</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, radio.o(i.RADIO_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = RADIO_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Inc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Dec
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_CreateUser)
</UL>
<P><STRONG><a name="[188]"></a>RADIO_CreateIndirect</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, radio.o(i.RADIO_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = RADIO_CreateIndirect &rArr; RADIO_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configdlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[68b]"></a>RADIO_CreateUser</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, radio.o(i.RADIO_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = RADIO_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_Create
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_AddItem
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateIndirect
</UL>

<P><STRONG><a name="[68a]"></a>RADIO_Dec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.RADIO_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RADIO_Dec &rArr; RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
</UL>

<P><STRONG><a name="[12]"></a>RADIO_DrawSkinFlex</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, radio_skinflex.o(i.RADIO_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RADIO_DrawSkinFlex &rArr; GUI__FillTrippleArc &rArr; _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.data)
</UL>
<P><STRONG><a name="[54d]"></a>RADIO_GetValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio.o(i.RADIO_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = RADIO_GetValue &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
</UL>

<P><STRONG><a name="[54e]"></a>RADIO_Inc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.RADIO_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RADIO_Inc &rArr; RADIO_AddValue &rArr; RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
</UL>

<P><STRONG><a name="[34b]"></a>RADIO_SetFont</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, radio.o(i.RADIO_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RADIO_SetFont &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[34d]"></a>RADIO_SetGroupId</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, radio.o(i.RADIO_SetGroupId))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RADIO_SetGroupId &rArr; _GetNextInGroup &rArr; _IsInGroup &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextInGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[34a]"></a>RADIO_SetText</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, radio.o(i.RADIO_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = RADIO_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strlen
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_SetItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[550]"></a>RADIO_SetValue</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, radio.o(i.RADIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = RADIO_SetValue &rArr; RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_AddValue
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[11]"></a>RADIO__GetButtonSize</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, radio.o(i.RADIO__GetButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO__GetButtonSize
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.data)
</UL>
<P><STRONG><a name="[68f]"></a>RADIO__SetValue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, radio.o(i.RADIO__SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RADIO__SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
</UL>

<P><STRONG><a name="[691]"></a>SCROLLBAR_AddValue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, scrollbar.o(i.SCROLLBAR_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Inc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Dec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
</UL>

<P><STRONG><a name="[f4]"></a>SCROLLBAR_Callback</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, scrollbar.o(i.SCROLLBAR_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Inc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Dec
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar.o(i.SCROLLBAR_CreateUser)
</UL>
<P><STRONG><a name="[698]"></a>SCROLLBAR_Create</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, scrollbar.o(i.SCROLLBAR_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
</UL>

<P><STRONG><a name="[699]"></a>SCROLLBAR_CreateUser</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, scrollbar.o(i.SCROLLBAR_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Create
</UL>

<P><STRONG><a name="[696]"></a>SCROLLBAR_Dec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scrollbar.o(i.SCROLLBAR_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_Dec &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[1f]"></a>SCROLLBAR_DrawSkinFlex</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_DrawSkinFlex &rArr; WIDGET__DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar.o(.data)
</UL>
<P><STRONG><a name="[66f]"></a>SCROLLBAR_GetValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_GetValue &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[695]"></a>SCROLLBAR_Inc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scrollbar.o(i.SCROLLBAR_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_Inc &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[69e]"></a>SCROLLBAR_SetNumItems</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR_SetNumItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_SetNumItems &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[69f]"></a>SCROLLBAR_SetPageSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR_SetPageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_SetPageSize &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
</UL>

<P><STRONG><a name="[692]"></a>SCROLLBAR_SetValue</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scrollbar.o(i.SCROLLBAR_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[693]"></a>SCROLLBAR__InvalidatePartner</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scrollbar.o(i.SCROLLBAR__InvalidatePartner))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[73b]"></a>SCROLLBAR__Rect2VRect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scrollbar.o(i.SCROLLBAR__Rect2VRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCROLLBAR__Rect2VRect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[fb]"></a>TEXT_Callback</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, text.o(i.TEXT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = TEXT_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(i.TEXT_CreateUser)
</UL>
<P><STRONG><a name="[185]"></a>TEXT_CreateIndirect</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, text.o(i.TEXT_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = TEXT_CreateIndirect &rArr; TEXT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
</UL>
<BR>[Address Reference Count : 6]<UL><LI> framewindlg.o(.rodata._aDialogCreate)
<LI> chipdlg.o(.rodata._aDialogCreate)
<LI> configdlg.o(.rodata._aDialogCreate)
<LI> cswritedlg.o(.rodata._aDialogCreate)
<LI> summarydlg.o(.rodata._aDialogCreate)
<LI> hexdlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[6a2]"></a>TEXT_CreateUser</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, text.o(i.TEXT_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = TEXT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateIndirect
</UL>

<P><STRONG><a name="[341]"></a>TEXT_SetFont</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, text.o(i.TEXT_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = TEXT_SetFont &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[348]"></a>TEXT_SetText</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, text.o(i.TEXT_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = TEXT_SetText &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>

<P><STRONG><a name="[347]"></a>TEXT_SetTextColor</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, text.o(i.TEXT_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = TEXT_SetTextColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[549]"></a>USBD_Connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_Connect &rArr; USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[6a9]"></a>USBD_Core_Endpoint0_InDataSent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Core_Endpoint0_InDataSent &rArr; USBD_Class_Endpoint0_InDataSent
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_InDataSent
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6ab]"></a>USBD_Core_Endpoint0_OutDataReceived</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Core_Endpoint0_OutDataReceived &rArr; USBD_Class_Endpoint0_OutDataReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_OutDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6ad]"></a>USBD_Core_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketProcessed &rArr; USBD_Class_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6af]"></a>USBD_Core_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketReceived &rArr; USBD_Class_Endpoint0_SetupPacketReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[a9]"></a>USBD_Core_Thread</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Core_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = USBD_Core_Thread &rArr; USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.text.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[6b1]"></a>USBD_DataInStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6b3]"></a>USBD_DataOutStage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBD_DataOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[548]"></a>USBD_Disconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_Disconnect &rArr; USBD_DriverDeviceDisconnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceDisconnect
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[6a4]"></a>USBD_DriverDeviceConnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[6b4]"></a>USBD_DriverDeviceDisconnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBD_DriverDeviceDisconnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
</UL>

<P><STRONG><a name="[6d7]"></a>USBD_DriverDeviceGetState</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_DriverDeviceGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetState
</UL>

<P><STRONG><a name="[6b5]"></a>USBD_DriverDeviceSetAddress</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_DriverDeviceSetAddress &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6a7]"></a>USBD_DriverEndpointConfigure</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBD_DriverEndpointConfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[6b7]"></a>USBD_DriverEndpointStall</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBD_DriverEndpointStall &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6b2]"></a>USBD_DriverEndpointTransfer</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[6b6]"></a>USBD_DriverEndpointTransferAbort</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[6b8]"></a>USBD_DriverEndpointTransferGetResult</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
</UL>

<P><STRONG><a name="[6b9]"></a>USBD_DriverEndpointUnconfigure</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[6dc]"></a>USBD_DriverGetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[6db]"></a>USBD_DriverGetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[6ba]"></a>USBD_DriverInitialize</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_DriverInitialize &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[6bb]"></a>USBD_DriverPowerControl</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverPowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_DriverPowerControl &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[6bc]"></a>USBD_DriverReadSetupPacket</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverReadSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_DriverReadSetupPacket &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6bd]"></a>USBD_DriverUninitialize</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBD_DriverUninitialize &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
</UL>

<P><STRONG><a name="[6c1]"></a>USBD_Endpoint0_Out_HID_ReqToIF</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_Out_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = USBD_Endpoint0_Out_HID_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetReport
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6dd]"></a>USBD_Endpoint0_ReqGetDescriptor_HID</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_ReqGetDescriptor_HID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[6cb]"></a>USBD_Endpoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_Setup_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = USBD_Endpoint0_Setup_HID_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetProtocol
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetReport
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetProtocol
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetIdle
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[547]"></a>USBD_GetState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetState &rArr; USBD_DriverDeviceGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceGetState
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[6d3]"></a>USBD_HID_CoreGetIdle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreGetIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[6d5]"></a>USBD_HID_CoreGetProtocol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreGetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[6d2]"></a>USBD_HID_CoreGetReport</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_CoreGetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[6d4]"></a>USBD_HID_CoreSetIdle</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_HID_CoreSetIdle &rArr; USBD_TimerStart &rArr; osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[6d6]"></a>USBD_HID_CoreSetProtocol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreSetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[6d1]"></a>USBD_HID_CoreSetReport</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_HID_CoreSetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
</UL>

<P><STRONG><a name="[30c]"></a>USBD_HID_EndpointStart</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
</UL>

<P><STRONG><a name="[3f2]"></a>USBD_HID_GetReportTrigger</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_GetReportTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
</UL>

<P><STRONG><a name="[302]"></a>USBD_HID_Initialize</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_HID_Initialize &rArr; USBD_TimerCreate &rArr; osTimerNew &rArr; EvrRtxTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerCreate
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
</UL>

<P><STRONG><a name="[312]"></a>USBD_HID_Reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = USBD_HID_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[31b]"></a>USBD_HID_SetConfiguration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_HID_SetConfiguration &rArr; USBD_TimerStart &rArr; osTimerStart &rArr; EvrRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
</UL>

<P><STRONG><a name="[aa]"></a>USBD_HID_Thread</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBD_HID_Thread &rArr; USBD_HID_EpIntOut &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.text.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[ab]"></a>USBD_HID_Timer</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USBD_HID_Timer &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.text.USBD_TimerCreate)
</UL>
<P><STRONG><a name="[304]"></a>USBD_HID_Uninitialize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_HID_Uninitialize &rArr; USBD_ThreadTerminate &rArr; osThreadTerminate &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
</UL>

<P><STRONG><a name="[546]"></a>USBD_Initialize</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, usbd_lib_core.o(i.USBD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBD_Initialize &rArr; USBD_DriverPowerControl &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetVersion
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetCapabilities
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[2ff]"></a>USBD_SignalDeviceEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalDeviceEvent
</UL>

<P><STRONG><a name="[300]"></a>USBD_SignalEndpointEvent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_lib_drv.o(i.USBD_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalEndpointEvent
</UL>

<P><STRONG><a name="[6c0]"></a>USBD_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBD_StatusInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6bf]"></a>USBD_StatusInStageDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusInStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBD_StatusInStageDone &rArr; USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6be]"></a>USBD_StatusOutStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c5]"></a>USBD_StatusOutStageDone</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusOutStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBD_StatusOutStageDone &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[54a]"></a>USBD_Uninitialize</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, usbd_lib_core.o(i.USBD_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBD_Uninitialize &rArr; USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverUninitialize
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[575]"></a>WIDGET_AndState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widget.o(i.WIDGET_AndState))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[558]"></a>WIDGET_HandleActive</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, widget.o(i.WIDGET_HandleActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[574]"></a>WIDGET_OrState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widget.o(i.WIDGET_OrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[672]"></a>WIDGET_SetEffect</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, widget.o(i.WIDGET_SetEffect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WIDGET_SetEffect &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
</UL>

<P><STRONG><a name="[6e3]"></a>WIDGET_SetState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, widget.o(i.WIDGET_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WIDGET_SetState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[69d]"></a>WIDGET__DrawTriangle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, widget.o(i.WIDGET__DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WIDGET__DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
</UL>

<P><STRONG><a name="[683]"></a>WIDGET__FillRectEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.WIDGET__FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WIDGET__FillRectEx &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DrawTextItemH
</UL>

<P><STRONG><a name="[6e4]"></a>WIDGET__GetClientRect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, widget.o(i.WIDGET__GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = WIDGET__GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[681]"></a>WIDGET__GetInsideRect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, widget.o(i.WIDGET__GetInsideRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIDGET__GetInsideRect
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
</UL>

<P><STRONG><a name="[564]"></a>WIDGET__Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, widget.o(i.WIDGET__Init))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
</UL>

<P><STRONG><a name="[69b]"></a>WIDGET__RotateRect90</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, widget.o(i.WIDGET__RotateRect90))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
</UL>

<P><STRONG><a name="[fc]"></a>WINDOW_Callback</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, window.o(i.WINDOW_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = WINDOW_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(i.WINDOW_CreateUser)
</UL>
<P><STRONG><a name="[186]"></a>WINDOW_CreateIndirect</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, window.o(i.WINDOW_CreateIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = WINDOW_CreateIndirect &rArr; WINDOW_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chipdlg.o(.rodata._aDialogCreate)
<LI> configdlg.o(.rodata._aDialogCreate)
<LI> cswritedlg.o(.rodata._aDialogCreate)
<LI> summarydlg.o(.rodata._aDialogCreate)
<LI> hexdlg.o(.rodata._aDialogCreate)
</UL>
<P><STRONG><a name="[6e7]"></a>WINDOW_CreateUser</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, window.o(i.WINDOW_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = WINDOW_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateIndirect
</UL>

<P><STRONG><a name="[5fe]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[6e8]"></a>WM_AttachWindow</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_lib.o(i.WM_AttachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindowAt
</UL>

<P><STRONG><a name="[66b]"></a>WM_AttachWindowAt</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_lib.o(i.WM_AttachWindowAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = WM_AttachWindowAt &rArr; WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
</UL>

<P><STRONG><a name="[6ed]"></a>WM_BringToBottom</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, wm_lib.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[6e2]"></a>WM_BringToTop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_bringtotop.o(i.WM_BringToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM_BringToTop &rArr; _BringToTop &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[6f1]"></a>WM_CreateTimer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wm_timer.o(i.WM_CreateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[563]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_CreateUser
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
</UL>

<P><STRONG><a name="[615]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[346]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[6f6]"></a>WM_DeleteTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_timer.o(i.WM_DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteTimer
</UL>

<P><STRONG><a name="[5c0]"></a>WM_DeleteWindow</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, wm.o(i.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WM_DeleteWindow &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DeleteScrollbar
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
</UL>

<P><STRONG><a name="[6e9]"></a>WM_DetachWindow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_lib.o(i.WM_DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindowAt
</UL>

<P><STRONG><a name="[580]"></a>WM_DisableMemdev</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_memdev.o(i.WM_DisableMemdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_DisableMemdev &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_CreateUser
</UL>

<P><STRONG><a name="[5df]"></a>WM_Exec</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wm.o(i.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = WM_Exec &rArr; _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>

<P><STRONG><a name="[6fe]"></a>WM_ForEachDesc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_lib.o(i.WM_ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_ForEachDesc &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>

<P><STRONG><a name="[75a]"></a>WM_GetActiveWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(i.WM_GetActiveWindow))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>

<P><STRONG><a name="[68c]"></a>WM_GetBkColor</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_lib.o(i.WM_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_GetBkColor &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_CreateUser
</UL>

<P><STRONG><a name="[5e6]"></a>WM_GetClientRect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
</UL>

<P><STRONG><a name="[700]"></a>WM_GetClientRectEx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>

<P><STRONG><a name="[5bd]"></a>WM_GetClientWindow</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, wm_lib.o(i.WM_GetClientWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_GetClientWindow &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
</UL>

<P><STRONG><a name="[26f]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_lib.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSummary
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHex
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFramewin
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateChip
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCSWrite
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[761]"></a>WM_GetDesktopWindowEx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_lib.o(i.WM_GetDesktopWindowEx))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>

<P><STRONG><a name="[33f]"></a>WM_GetDialogItem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm_lib.o(i.WM_GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
</UL>

<P><STRONG><a name="[58c]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>

<P><STRONG><a name="[438]"></a>WM_GetFocusedWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetFocusedWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_GetFocusedWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
</UL>

<P><STRONG><a name="[702]"></a>WM_GetHasTrans</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_GetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetHasTrans &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[344]"></a>WM_GetId</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_lib.o(i.WM_GetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_GetId &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
</UL>

<P><STRONG><a name="[69a]"></a>WM_GetInsideRectEx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, wm_lib.o(i.WM_GetInsideRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_GetInsideRectEx &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_CreateUser
</UL>

<P><STRONG><a name="[58d]"></a>WM_GetNextSibling</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetNextSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextInGroup
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>

<P><STRONG><a name="[4df]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitConfig
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollPartner
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>

<P><STRONG><a name="[6a0]"></a>WM_GetScrollPartner</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetScrollPartner))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>

<P><STRONG><a name="[703]"></a>WM_GetScrollbarH</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = WM_GetScrollbarH &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[704]"></a>WM_GetScrollbarV</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetScrollbarV))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[705]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetWindowOrgX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowOrgX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[706]"></a>WM_GetWindowOrgY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetWindowOrgY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowOrgY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[707]"></a>WM_GetWindowRect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>

<P><STRONG><a name="[708]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetWindowRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[709]"></a>WM_GetWindowSizeX</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_getwindowsize.o(i.WM_GetWindowSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowSizeX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[589]"></a>WM_GetWindowSizeY</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_getwindowsize.o(i.WM_GetWindowSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[723]"></a>WM_HasCaptured</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_lib.o(i.WM_HasCaptured))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[57c]"></a>WM_HasFocus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_lib.o(i.WM_HasFocus))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[70b]"></a>WM_HideWindow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_hide.o(i.WM_HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = WM_HideWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
</UL>

<P><STRONG><a name="[5f8]"></a>WM_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[70d]"></a>WM_InvalidateRect</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>

<P><STRONG><a name="[43a]"></a>WM_InvalidateWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetActive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbInvalidateOne
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[713]"></a>WM_InvalidateWindowAndDescs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_lib.o(i.WM_InvalidateWindowAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>

<P><STRONG><a name="[714]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm.o(i.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[716]"></a>WM_IsEnabled</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_lib.o(i.WM_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_IsEnabled &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextInGroup
</UL>

<P><STRONG><a name="[717]"></a>WM_IsFocusable</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, wm_lib.o(i.WM_IsFocusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WM_IsFocusable &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[66c]"></a>WM_IsVisible</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_lib.o(i.WM_IsVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_IsVisible &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[57b]"></a>WM_IsWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_lib.o(i.WM_IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WM_IsWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[686]"></a>WM_MoveChildTo</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wm_lib.o(i.WM_MoveChildTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WM_MoveChildTo &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
</UL>

<P><STRONG><a name="[6ec]"></a>WM_MoveTo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = WM_MoveTo &rArr; WM__MoveTo &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindowAt
</UL>

<P><STRONG><a name="[6eb]"></a>WM_MoveWindow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
</UL>

<P><STRONG><a name="[690]"></a>WM_NotifyParent</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, wm_lib.o(i.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[61f]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_lib.o(i.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendKeyMsg
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[71a]"></a>WM_ResizeWindow</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, wm_lib.o(i.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
</UL>

<P><STRONG><a name="[71c]"></a>WM_RestartTimer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_timer.o(i.WM_RestartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM_RestartTimer &rArr; GUI_TIMER_SetPeriod &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
</UL>

<P><STRONG><a name="[71d]"></a>WM_Screen2hWinEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_screen2win.o(i.WM_Screen2hWinEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_Screen2hWinEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[6f2]"></a>WM_SelectWindow</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WM_SelectWindow &rArr; WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[627]"></a>WM_SendMessage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm.o(i.WM_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientWindow
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDialogStatusPtr
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetEffect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
</UL>

<P><STRONG><a name="[5bf]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_SendMessageNoPara &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__InvalidatePartner
</UL>

<P><STRONG><a name="[6f5]"></a>WM_SendToParent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>

<P><STRONG><a name="[720]"></a>WM_SetCapture</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_setcapture.o(i.WM_SetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = WM_SetCapture &rArr; WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[722]"></a>WM_SetCaptureMove</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, wm_setcapturemove.o(i.WM_SetCaptureMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = WM_SetCaptureMove &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasCaptured
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
</UL>

<P><STRONG><a name="[725]"></a>WM_SetDefault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm.o(i.WM_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[54f]"></a>WM_SetFocus</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, wm_lib.o(i.WM_SetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[57d]"></a>WM_SetFocusOnNextChild</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wm_setfocusonnextchild.o(i.WM_SetFocusOnNextChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextChild
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[58f]"></a>WM_SetFocusOnPrevChild</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_setfocusonprevchild.o(i.WM_SetFocusOnPrevChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = WM_SetFocusOnPrevChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__cbClient
</UL>

<P><STRONG><a name="[573]"></a>WM_SetHasTrans</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_SetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[687]"></a>WM_SetSize</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_lib.o(i.WM_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[5d2]"></a>WM_SetUserClipRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SetUserClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_SetUserClipRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5be]"></a>WM_ShowWindow</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_lib.o(i.WM_ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = WM_ShowWindow &rArr; WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDialogBox
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
</UL>

<P><STRONG><a name="[729]"></a>WM_ValidateWindow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_lib.o(i.WM_ValidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM_ValidateWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
</UL>

<P><STRONG><a name="[72a]"></a>WM__ActivateClipRect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>

<P><STRONG><a name="[70c]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm__private.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[70f]"></a>WM__Client2Screen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm.o(i.WM__Client2Screen))
<BR><BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[711]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[6f9]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_timer.o(i.WM__DeleteAssocTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WM__DeleteAssocTimer &rArr; WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[6fb]"></a>WM__DetachWindow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm.o(i.WM__DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = WM__DetachWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
</UL>

<P><STRONG><a name="[6ff]"></a>WM__ForEachDesc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm__private.o(i.WM__ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = WM__ForEachDesc &rArr;  WM__ForEachDesc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>

<P><STRONG><a name="[6f4]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>

<P><STRONG><a name="[67f]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
</UL>

<P><STRONG><a name="[68d]"></a>WM__GetFirstSibling</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm__private.o(i.WM__GetFirstSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
</UL>

<P><STRONG><a name="[726]"></a>WM__GetFocusedChild</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetFocusedChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__GetFocusedChild &rArr; WM__IsChild
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[72e]"></a>WM__GetLastSibling</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm__private.o(i.WM__GetLastSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetLastSibling
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
</UL>

<P><STRONG><a name="[5bc]"></a>WM__GetNextIVR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[6ee]"></a>WM__GetPrevSibling</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
</UL>

<P><STRONG><a name="[6f8]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm.o(i.WM__GetTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetTopLevelLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[586]"></a>WM__GetWindowSizeX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(i.WM__GetWindowSizeX))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[587]"></a>WM__GetWindowSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(i.WM__GetWindowSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[5bb]"></a>WM__InitIVRSearch</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[6ea]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>

<P><STRONG><a name="[712]"></a>WM__Invalidate1Abs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM__Invalidate1Abs &rArr; _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[70e]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[730]"></a>WM__InvalidateParent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__InvalidateParent
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[731]"></a>WM__InvalidateRect</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wm.o(i.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[6ef]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
</UL>

<P><STRONG><a name="[6e6]"></a>WM__IsAncestor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm__private.o(i.WM__IsAncestor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
</UL>

<P><STRONG><a name="[6e5]"></a>WM__IsAncestorOrSelf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm__private.o(i.WM__IsAncestorOrSelf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsAncestorOrSelf &rArr; WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
</UL>

<P><STRONG><a name="[66d]"></a>WM__IsChild</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm__private.o(i.WM__IsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsChild
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowPage
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>

<P><STRONG><a name="[56c]"></a>WM__IsEnabled</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm__private.o(i.WM__IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
</UL>

<P><STRONG><a name="[760]"></a>WM__IsInWindow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_screen2win.o(i.WM__IsInWindow))
<BR><BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[6f7]"></a>WM__IsWindow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm.o(i.WM__IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[719]"></a>WM__MoveTo</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_move.o(i.WM__MoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WM__MoveTo &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
</UL>

<P><STRONG><a name="[718]"></a>WM__MoveWindow</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, wm_move.o(i.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
</UL>

<P><STRONG><a name="[733]"></a>WM__Paint</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, wm.o(i.WM__Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[106]"></a>WM__Paint1</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, wm.o(i.WM__Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i._Paint1)
</UL>
<P><STRONG><a name="[75d]"></a>WM__RectIsNZ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm.o(i.WM__RectIsNZ))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[72d]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm.o(i.WM__RemoveWindowFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__RemoveWindowFromList
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BringToTop
</UL>

<P><STRONG><a name="[71f]"></a>WM__SelectTopLevelLayer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(i.WM__SelectTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[579]"></a>WM__SendMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm__private.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsInGroup
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>

<P><STRONG><a name="[60d]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, wm__private.o(i.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[6f3]"></a>WM__SendMsgNoData</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[6e1]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, wm__private.o(i.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[255]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[357]"></a>__sys_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_close &rArr; efs_close &rArr; falloc_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[358]"></a>__sys_flen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[35a]"></a>__sys_open</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __sys_open &rArr; efs_open &rArr; file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[35c]"></a>__sys_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sys_read &rArr; efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[35d]"></a>__sys_seek</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sys_seek &rArr; efs_seek &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[360]"></a>__sys_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[3bc]"></a>_fdelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fdelete &rArr; efs_delete &rArr; file_find &rArr; block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[243]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e0]"></a>efs_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_efs.o(i.efs_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR0_DriverEvent
</UL>

<P><STRONG><a name="[789]"></a>efs_analyse</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fs_efs.o(i.efs_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = efs_analyse &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanalyse
</UL>

<P><STRONG><a name="[78b]"></a>efs_check</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fs_efs.o(i.efs_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = efs_check &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcheck
</UL>

<P><STRONG><a name="[764]"></a>efs_close</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_efs.o(i.efs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = efs_close &rArr; falloc_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[78c]"></a>efs_defrag</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, fs_efs.o(i.efs_defrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = efs_defrag &rArr; ed_copy &rArr; ed_write &rArr; ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_BlockInvalid
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_get_next
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdefrag
</UL>

<P><STRONG><a name="[773]"></a>efs_delete</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, fs_efs.o(i.efs_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = efs_delete &rArr; file_find &rArr; block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_name_validate
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[790]"></a>efs_ffind</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, fs_efs.o(i.efs_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = efs_ffind &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_read
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[766]"></a>efs_flen</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_efs.o(i.efs_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[791]"></a>efs_format</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fs_efs.o(i.efs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = efs_format &rArr; block_erase &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[792]"></a>efs_free</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs_efs.o(i.efs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = efs_free &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[76a]"></a>efs_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_efs.o(i.efs_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = efs_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
</UL>

<P><STRONG><a name="[793]"></a>efs_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_efs.o(i.efs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = efs_init &rArr; fs_config &rArr; fs_config_flash &rArr; fs_mutex_new &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[795]"></a>efs_mount</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fs_efs.o(i.efs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = efs_mount
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[76b]"></a>efs_open</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, fs_efs.o(i.efs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = efs_open &rArr; file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_name_validate
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[76d]"></a>efs_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_efs.o(i.efs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = efs_read &rArr; efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[797]"></a>efs_rename</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, fs_efs.o(i.efs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = efs_rename &rArr; file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_name_validate
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[76f]"></a>efs_seek</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, fs_efs.o(i.efs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = efs_seek &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[771]"></a>efs_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fs_efs.o(i.efs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[5f1]"></a>emWin_LCD_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lcd.o(i.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[3d6]"></a>fanalyse</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_mapi.o(i.fanalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fanalyse &rArr; efs_analyse &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
</UL>

<P><STRONG><a name="[3de]"></a>fcheck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_mapi.o(i.fcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fcheck &rArr; efs_check &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[3d7]"></a>fdefrag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_mapi.o(i.fdefrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fdefrag &rArr; efs_defrag &rArr; ed_copy &rArr; ed_write &rArr; ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
</UL>

<P><STRONG><a name="[3af]"></a>ffind</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ffind &rArr; efs_ffind &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
</UL>

<P><STRONG><a name="[3db]"></a>fformat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.fformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fformat &rArr; efs_format &rArr; block_erase &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
</UL>

<P><STRONG><a name="[3d9]"></a>ffree</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.ffree))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ffree &rArr; efs_free &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
</UL>

<P><STRONG><a name="[3dc]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = finit &rArr; efs_init &rArr; fs_config &rArr; fs_config_flash &rArr; fs_mutex_new &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[3dd]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fmount &rArr; fs_mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[a2]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[3c9]"></a>frename</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_mapi.o(i.frename))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = frename &rArr; efs_rename &rArr; file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_firmware_backup
</UL>

<P><STRONG><a name="[7a5]"></a>fs_config_evr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_mapi.o(i.fs_config_evr))
<BR><BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[767]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdefrag
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcheck
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanalyse
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[7a6]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[79b]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[79c]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[799]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[7a1]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1ef]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[a1]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[7e5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[7e6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ca]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2c4]"></a>MX_ADC1_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c7]"></a>MX_ADC2_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(.text.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>MX_ADC3_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(.text.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>MX_CRC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ca]"></a>MX_DAC_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(.text.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cc]"></a>MX_GPIO_Init</STRONG> (Thumb, 550 bytes, Stack size 120 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ce]"></a>MX_I2C1_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cf]"></a>MX_I2C2_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d0]"></a>MX_SPI1_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d1]"></a>MX_SPI2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d2]"></a>MX_SPI3_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d3]"></a>MX_TIM10_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d4]"></a>MX_TIM13_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text.MX_TIM13_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM13_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d5]"></a>MX_TIM14_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text.MX_TIM14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM14_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>MX_TIM6_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(.text.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d8]"></a>MX_TIM7_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(.text.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d9]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>MX_USB_OTG_FS_PCD_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text.MX_USB_OTG_FS_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MX_USB_OTG_FS_PCD_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[362]"></a>bsp_init</STRONG> (Thumb, 598 bytes, Stack size 96 bytes, firmware.o(.text.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = bsp_init &rArr; st7789v_init &rArr; lcd_ctrl_read_id &rArr; lcd_io_transfer &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_main
</UL>

<P><STRONG><a name="[53e]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ui.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[4da]"></a>power_setup</STRONG> (Thumb, 786 bytes, Stack size 136 bytes, ui.o(.text.power_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = power_setup &rArr; file_hex_get_voltage &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_set
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_voltage
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_key_process
</UL>

<P><STRONG><a name="[3b8]"></a>led_failed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, error.o(.text.led_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = led_failed &rArr; led_set &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_handler
</UL>

<P><STRONG><a name="[3b9]"></a>led_ok</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, error.o(.text.led_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = led_ok &rArr; led_set &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_handler
</UL>

<P><STRONG><a name="[44e]"></a>__list_add</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cswrite_cfg.o(.text.__list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[368]"></a>calc_crc32</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, cswrite_cfg.o(.text.calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = calc_crc32 &rArr; crc32_sw_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_sw_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_load
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_save
</UL>

<P><STRONG><a name="[3a2]"></a>cswrite_cfg_save</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, cswrite_cfg.o(.text.cswrite_cfg_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = cswrite_cfg_save &rArr; fram_map_cfg_write &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_map_cfg_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc32
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_rolling_code
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_active_date
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_reset
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_rolling_code
</UL>

<P><STRONG><a name="[39a]"></a>get_chip_name</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cswrite_cfg.o(.text.get_chip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = get_chip_name &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
</UL>

<P><STRONG><a name="[39d]"></a>list_add</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cswrite_cfg.o(.text.list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_add &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_version
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_id
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
</UL>

<P><STRONG><a name="[39b]"></a>tlv_desc_new</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cswrite_cfg.o(.text.tlv_desc_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tlv_desc_new &rArr; calloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_chip
</UL>

<P><STRONG><a name="[524]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tlv.o(.text.INIT_LIST_HEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_init
</UL>

<P><STRONG><a name="[450]"></a>__list_add</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tlv.o(.text.__list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[452]"></a>__list_del</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tlv.o(.text.__list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>

<P><STRONG><a name="[44f]"></a>list_add</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tlv.o(.text.list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_add &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_voltage
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_verify
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_time
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_rolling_code
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_program
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_osc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_option
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_memory
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_limit
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_code
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_chip
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_add
</UL>

<P><STRONG><a name="[451]"></a>list_del</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tlv.o(.text.list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_del &rArr; __list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_destroy
</UL>

<P><STRONG><a name="[51e]"></a>tlv_desc_add</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tlv.o(.text.tlv_desc_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlv_desc_add &rArr; list_add &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
</UL>

<P><STRONG><a name="[51f]"></a>tlv_desc_new</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tlv.o(.text.tlv_desc_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tlv_desc_new &rArr; calloc &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_version
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_unpack_desc_crypto
</UL>

<P><STRONG><a name="[520]"></a>tlv_file_append_crc32</STRONG> (Thumb, 422 bytes, Stack size 96 bytes, tlv.o(.text.tlv_file_append_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tlv_file_append_crc32 &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
</UL>

<P><STRONG><a name="[521]"></a>tlv_file_calc_crc32</STRONG> (Thumb, 934 bytes, Stack size 432 bytes, tlv.o(.text.tlv_file_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_sw_calc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
</UL>

<P><STRONG><a name="[522]"></a>tlv_file_calc_len</STRONG> (Thumb, 2110 bytes, Stack size 240 bytes, tlv.o(.text.tlv_file_calc_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tlv_file_calc_len &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[523]"></a>tlv_file_dump</STRONG> (Thumb, 86 bytes, Stack size 288 bytes, tlv.o(.text.tlv_file_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tlv_file_dump &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_verify
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
</UL>

<P><STRONG><a name="[525]"></a>tlv_file_pack_desc</STRONG> (Thumb, 1574 bytes, Stack size 216 bytes, tlv.o(.text.tlv_file_pack_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = tlv_file_pack_desc &rArr; tlv_pack_desc_id &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_file_head
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_calc_len
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack
</UL>

<P><STRONG><a name="[52c]"></a>tlv_pack_desc_chip</STRONG> (Thumb, 1646 bytes, Stack size 232 bytes, tlv.o(.text.tlv_pack_desc_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_chip &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[529]"></a>tlv_pack_desc_crypto</STRONG> (Thumb, 792 bytes, Stack size 144 bytes, tlv.o(.text.tlv_pack_desc_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_crypto &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[53c]"></a>tlv_pack_desc_head</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, tlv.o(.text.tlv_pack_desc_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_voltage
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_version
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_osc
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_option
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_memory
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_id
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_crypto
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_chip
</UL>

<P><STRONG><a name="[527]"></a>tlv_pack_desc_id</STRONG> (Thumb, 1628 bytes, Stack size 240 bytes, tlv.o(.text.tlv_pack_desc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_id &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[52d]"></a>tlv_pack_desc_memory</STRONG> (Thumb, 1312 bytes, Stack size 208 bytes, tlv.o(.text.tlv_pack_desc_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_memory &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[52e]"></a>tlv_pack_desc_option</STRONG> (Thumb, 784 bytes, Stack size 144 bytes, tlv.o(.text.tlv_pack_desc_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_option &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[52b]"></a>tlv_pack_desc_osc</STRONG> (Thumb, 1322 bytes, Stack size 216 bytes, tlv.o(.text.tlv_pack_desc_osc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_osc &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[528]"></a>tlv_pack_desc_version</STRONG> (Thumb, 796 bytes, Stack size 144 bytes, tlv.o(.text.tlv_pack_desc_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_version &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[52a]"></a>tlv_pack_desc_voltage</STRONG> (Thumb, 1062 bytes, Stack size 184 bytes, tlv.o(.text.tlv_pack_desc_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tlv_pack_desc_voltage &rArr; tlv_pack_desc_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_pack_desc_head
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[526]"></a>tlv_pack_file_head</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, tlv.o(.text.tlv_pack_file_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tlv_pack_file_head &rArr; file_write &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_pack_desc
</UL>

<P><STRONG><a name="[52f]"></a>tlv_unpack_desc_chip</STRONG> (Thumb, 2342 bytes, Stack size 312 bytes, tlv.o(.text.tlv_unpack_desc_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_chip &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[538]"></a>tlv_unpack_desc_code</STRONG> (Thumb, 1748 bytes, Stack size 272 bytes, tlv.o(.text.tlv_unpack_desc_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_code &rArr; file_seek &rArr; fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; efs_flen &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[53a]"></a>tlv_unpack_desc_crypto</STRONG> (Thumb, 808 bytes, Stack size 152 bytes, tlv.o(.text.tlv_unpack_desc_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_crypto &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_new
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[539]"></a>tlv_unpack_desc_limit</STRONG> (Thumb, 442 bytes, Stack size 112 bytes, tlv.o(.text.tlv_unpack_desc_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_limit &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[532]"></a>tlv_unpack_desc_memory</STRONG> (Thumb, 1708 bytes, Stack size 264 bytes, tlv.o(.text.tlv_unpack_desc_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_memory &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[533]"></a>tlv_unpack_desc_option</STRONG> (Thumb, 1496 bytes, Stack size 232 bytes, tlv.o(.text.tlv_unpack_desc_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_option &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[531]"></a>tlv_unpack_desc_osc</STRONG> (Thumb, 1730 bytes, Stack size 272 bytes, tlv.o(.text.tlv_unpack_desc_osc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_osc &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[537]"></a>tlv_unpack_desc_program</STRONG> (Thumb, 442 bytes, Stack size 112 bytes, tlv.o(.text.tlv_unpack_desc_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_program &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[534]"></a>tlv_unpack_desc_rolling_code</STRONG> (Thumb, 1566 bytes, Stack size 248 bytes, tlv.o(.text.tlv_unpack_desc_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_rolling_code &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[536]"></a>tlv_unpack_desc_time</STRONG> (Thumb, 1206 bytes, Stack size 192 bytes, tlv.o(.text.tlv_unpack_desc_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_time &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[535]"></a>tlv_unpack_desc_verify</STRONG> (Thumb, 826 bytes, Stack size 160 bytes, tlv.o(.text.tlv_unpack_desc_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_verify &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[53b]"></a>tlv_unpack_desc_version</STRONG> (Thumb, 934 bytes, Stack size 168 bytes, tlv.o(.text.tlv_unpack_desc_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_version &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_desc_new
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[530]"></a>tlv_unpack_desc_voltage</STRONG> (Thumb, 1346 bytes, Stack size 224 bytes, tlv.o(.text.tlv_unpack_desc_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tlv_unpack_desc_voltage &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_file_unpack
</UL>

<P><STRONG><a name="[a6]"></a>_cbDialog</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, framewindlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; MULTIPAGE_AddEmptyPage &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AttachWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_AddEmptyPage
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetText
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSummary
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHex
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateChip
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCSWrite
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewindlg.o(.text.CreateFramewin)
</UL>
<P><STRONG><a name="[345]"></a>keyProcess</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, framewindlg.o(.text.keyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = keyProcess &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[a4]"></a>_cbDialog</STRONG> (Thumb, 744 bytes, Stack size 88 bytes, chipdlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chipdlg.o(.text.CreateChip)
</UL>
<P><STRONG><a name="[349]"></a>keyProcess</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, chipdlg.o(.text.keyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = keyProcess &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[a5]"></a>_cbDialog</STRONG> (Thumb, 880 bytes, Stack size 104 bytes, configdlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; keyProcess &rArr; widgetKeyProcess &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetText
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetFont
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitConfig
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configdlg.o(.text.CreateConfig)
</UL>
<P><STRONG><a name="[34f]"></a>keyProcess</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, configdlg.o(.text.keyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = keyProcess &rArr; widgetKeyProcess &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;widgetKeyProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[34e]"></a>quitConfig</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, configdlg.o(.text.quitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = quitConfig &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[439]"></a>widgetKeyProcess</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, configdlg.o(.text.widgetKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = widgetKeyProcess &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Inc
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_GetValue
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetWindow
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetSelection
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>

<P><STRONG><a name="[a3]"></a>_cbDialog</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, cswritedlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; initCSWrite &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCSWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cswritedlg.o(.text.CreateCSWrite)
</UL>
<P><STRONG><a name="[350]"></a>initCSWrite</STRONG> (Thumb, 840 bytes, Stack size 336 bytes, cswritedlg.o(.text.initCSWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = initCSWrite &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_set_active_date
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_get_version
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_serial_id
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[351]"></a>keyProcess</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, cswritedlg.o(.text.keyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = keyProcess &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[a8]"></a>_cbDialog</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, summarydlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; keyProcess &rArr; initSummary &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> summarydlg.o(.text.CreateSummary)
</UL>
<P><STRONG><a name="[352]"></a>initSummary</STRONG> (Thumb, 848 bytes, Stack size 320 bytes, summarydlg.o(.text.initSummary))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = initSummary &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_get_num_ok
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_log_get_num_failed
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswrite_cfg_get_rolling_code
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_limit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[353]"></a>keyProcess</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, summarydlg.o(.text.keyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = keyProcess &rArr; initSummary &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSummary
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[a7]"></a>_cbDialog</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, hexdlg.o(.text._cbDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = _cbDialog &rArr; initHex &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hexdlg.o(.text.CreateHex)
</UL>
<P><STRONG><a name="[354]"></a>initHex</STRONG> (Thumb, 570 bytes, Stack size 248 bytes, hexdlg.o(.text.initHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = initHex &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_rolling_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_chip
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_option
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDialog
</UL>

<P><STRONG><a name="[3ad]"></a>default_get_size</STRONG> (Thumb, 384 bytes, Stack size 352 bytes, files.o(.text.default_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = default_get_size &rArr; ffind &rArr; efs_ffind &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
</UL>

<P><STRONG><a name="[3b5]"></a>dot_format</STRONG> (Thumb, 892 bytes, Stack size 288 bytes, files.o(.text.dot_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = dot_format &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
</UL>

<P><STRONG><a name="[3d5]"></a>file_system_defrag</STRONG> (Thumb, 548 bytes, Stack size 88 bytes, files.o(.text.file_system_defrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = file_system_defrag &rArr; fdefrag &rArr; efs_defrag &rArr; ed_copy &rArr; ed_write &rArr; ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdefrag
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanalyse
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[3da]"></a>file_system_format</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, files.o(.text.file_system_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = file_system_format &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_init
</UL>

<P><STRONG><a name="[3d1]"></a>file_system_init</STRONG> (Thumb, 928 bytes, Stack size 136 bytes, files.o(.text.file_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = file_system_init &rArr; file_system_dir &rArr; dot_format &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_dir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcheck
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_format
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_system_defrag
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_init
</UL>

<P><STRONG><a name="[3c2]"></a>get_file_ext_by_fp</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, files.o(.text.get_file_ext_by_fp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_seek
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_pos
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
</UL>

<P><STRONG><a name="[3c4]"></a>get_file_ext_by_id</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, files.o(.text.get_file_ext_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = get_file_ext_by_id &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
</UL>

<P><STRONG><a name="[3ae]"></a>get_file_name</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, files.o(.text.get_file_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = get_file_name &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_get_size
</UL>

<P><STRONG><a name="[4ea]"></a>byte2word</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, protcol.o(.text.byte2word))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = byte2word
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
</UL>

<P><STRONG><a name="[4cc]"></a>calc_xor_sum</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, protcol.o(.text.calc_xor_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calc_xor_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[4e7]"></a>get_file</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, protcol.o(.text.get_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
</UL>

<P><STRONG><a name="[4cb]"></a>pack</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, protcol.o(.text.pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pack &rArr; calc_xor_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_xor_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
</UL>

<P><STRONG><a name="[4e0]"></a>reply_hande_shake</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, protcol.o(.text.reply_hande_shake))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = reply_hande_shake &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
</UL>

<P><STRONG><a name="[4e1]"></a>reply_read</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, protcol.o(.text.reply_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = reply_read &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
</UL>

<P><STRONG><a name="[4e2]"></a>reply_recv</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, protcol.o(.text.reply_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = reply_recv &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
</UL>

<P><STRONG><a name="[4e3]"></a>reply_send</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, protcol.o(.text.reply_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = reply_send &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
</UL>

<P><STRONG><a name="[4e4]"></a>reply_write</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, protcol.o(.text.reply_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = reply_write &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_write
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
</UL>

<P><STRONG><a name="[4e5]"></a>request_hande_shake</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, protcol.o(.text.request_hande_shake))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = request_hande_shake &rArr; reply_hande_shake &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_hande_shake
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[4e6]"></a>request_read_parser</STRONG> (Thumb, 354 bytes, Stack size 72 bytes, protcol.o(.text.request_read_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = request_read_parser &rArr; file_get_size &rArr; default_get_size &rArr; ffind &rArr; efs_ffind &rArr; file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_read
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[4e8]"></a>request_recv_parser</STRONG> (Thumb, 726 bytes, Stack size 120 bytes, protcol.o(.text.request_recv_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = request_recv_parser &rArr; reply_recv &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_recv
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[4e9]"></a>request_send_parser</STRONG> (Thumb, 1034 bytes, Stack size 160 bytes, protcol.o(.text.request_send_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = request_send_parser &rArr; file_verify &rArr; tlv_file_verify &rArr; tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_get_code
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_verify
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_send
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2word
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_upgrade
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[4eb]"></a>request_write_parser</STRONG> (Thumb, 794 bytes, Stack size 136 bytes, protcol.o(.text.request_write_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = request_write_parser &rArr; reply_write &rArr; hid_write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_open
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_write
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte2word
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[519]"></a>unpack</STRONG> (Thumb, 906 bytes, Stack size 128 bytes, protcol.o(.text.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = unpack &rArr; request_send_parser &rArr; file_verify &rArr; tlv_file_verify &rArr; tlv_file_calc_crc32 &rArr; file_read &rArr; get_file_ext_by_fp &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_read
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_write_parser
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_send_parser
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_recv_parser
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_read_parser
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_hande_shake
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_xor_sum
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol
</UL>

<P><STRONG><a name="[373]"></a>power_voltage_is_valid</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, program.o(.text.power_voltage_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = power_voltage_is_valid &rArr; power_voltage_get &rArr; power_ctrl_vpp_readback &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_get
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_is_power_ready
</UL>

<P><STRONG><a name="[410]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, csu8rp3228.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_read
</UL>

<P><STRONG><a name="[40d]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, csu8rp3228.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_low
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_low
</UL>

<P><STRONG><a name="[40c]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, csu8rp3228.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_high
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_high
</UL>

<P><STRONG><a name="[413]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, csu8rp3228.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
</UL>

<P><STRONG><a name="[411]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, csu8rp3228.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
</UL>

<P><STRONG><a name="[412]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, csu8rp3228.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
</UL>

<P><STRONG><a name="[418]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, csu8rp3228.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
</UL>

<P><STRONG><a name="[417]"></a>LL_TIM_DisableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csu8rp3228.o(.text.LL_TIM_DisableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_stop
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
</UL>

<P><STRONG><a name="[415]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csu8rp3228.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_start
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
</UL>

<P><STRONG><a name="[416]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_get_count
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
</UL>

<P><STRONG><a name="[51d]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, csu8rp3228.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_start
</UL>

<P><STRONG><a name="[414]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, csu8rp3228.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_start
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
</UL>

<P><STRONG><a name="[378]"></a>cmd_begin_program</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, csu8rp3228.o(.text.cmd_begin_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cmd_begin_program &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[37d]"></a>cmd_clock_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.cmd_clock_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmd_clock_stop &rArr; io_icsp_send_dummy_cycle &rArr; io_icsp_delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[380]"></a>cmd_config_ptm</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, csu8rp3228.o(.text.cmd_config_ptm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = cmd_config_ptm &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc4_sw_calc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
</UL>

<P><STRONG><a name="[382]"></a>cmd_end_program</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csu8rp3228.o(.text.cmd_end_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_end_program &rArr; io_icsp_send &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[383]"></a>cmd_id_mem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.cmd_id_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_id_mem &rArr; io_icsp_send &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
</UL>

<P><STRONG><a name="[384]"></a>cmd_osc_cali</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, csu8rp3228.o(.text.cmd_osc_cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = cmd_osc_cali &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc4_sw_calc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[385]"></a>cmd_osc_sel</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, csu8rp3228.o(.text.cmd_osc_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = cmd_osc_sel &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc4_sw_calc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[386]"></a>cmd_program_mem</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, csu8rp3228.o(.text.cmd_program_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = cmd_program_mem &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc4_sw_calc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_option
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_without_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_rolling_code
</UL>

<P><STRONG><a name="[387]"></a>cmd_read_mem</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, csu8rp3228.o(.text.cmd_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = cmd_read_mem &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc4_sw_calc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_without_rolling_code
</UL>

<P><STRONG><a name="[388]"></a>cmd_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_reset &rArr; io_icsp_send &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
</UL>

<P><STRONG><a name="[389]"></a>cmd_verify</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csu8rp3228.o(.text.cmd_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_verify &rArr; io_icsp_send &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_readback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_get_id
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_blank_check
</UL>

<P><STRONG><a name="[18a]"></a>csu8rp3228_hande_shake</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, csu8rp3228.o(.text.csu8rp3228_hande_shake))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_hande_shake &rArr; chip_program_power_on &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_program_power_on
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_out
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_low
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_low
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[189]"></a>csu8rp3228_is_matched</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, csu8rp3228.o(.text.csu8rp3228_is_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = csu8rp3228_is_matched &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csu8rp3228.o(.rodata.csurp3228_ops)
</UL>
<P><STRONG><a name="[40b]"></a>io_icsp_clk_high</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_clk_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_icsp_clk_high &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
</UL>

<P><STRONG><a name="[38c]"></a>io_icsp_clk_low</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_clk_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_icsp_clk_low &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
</UL>

<P><STRONG><a name="[40e]"></a>io_icsp_da_high</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_da_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_icsp_da_high &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
</UL>

<P><STRONG><a name="[38b]"></a>io_icsp_da_low</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_da_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_icsp_da_low &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
</UL>

<P><STRONG><a name="[40f]"></a>io_icsp_da_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_da_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_icsp_da_read &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
</UL>

<P><STRONG><a name="[37b]"></a>io_icsp_da_set_in</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, csu8rp3228.o(.text.io_icsp_da_set_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = io_icsp_da_set_in &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
</UL>

<P><STRONG><a name="[379]"></a>io_icsp_da_set_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, csu8rp3228.o(.text.io_icsp_da_set_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = io_icsp_da_set_out &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_hande_shake
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_end_program
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
</UL>

<P><STRONG><a name="[419]"></a>io_icsp_delay_ns</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, csu8rp3228.o(.text.io_icsp_delay_ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_icsp_delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_read
</UL>

<P><STRONG><a name="[37f]"></a>io_icsp_delay_us</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, csu8rp3228.o(.text.io_icsp_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = io_icsp_delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_send_dummy_cycle
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_end_program
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clock_stop
</UL>

<P><STRONG><a name="[38e]"></a>io_icsp_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, csu8rp3228.o(.text.io_icsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = io_icsp_init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_is_matched
</UL>

<P><STRONG><a name="[37c]"></a>io_icsp_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, csu8rp3228.o(.text.io_icsp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = io_icsp_read &rArr; io_icsp_da_read &rArr; LL_GPIO_IsInputPinSet
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_ns
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_low
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_high
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
</UL>

<P><STRONG><a name="[37a]"></a>io_icsp_send</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, csu8rp3228.o(.text.io_icsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = io_icsp_send &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_ns
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_low
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_high
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_low
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_high
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_sel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_osc_cali
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id_mem
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_end_program
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_config_ptm
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_begin_program
</UL>

<P><STRONG><a name="[37e]"></a>io_icsp_send_dummy_cycle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, csu8rp3228.o(.text.io_icsp_send_dummy_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = io_icsp_send_dummy_cycle &rArr; io_icsp_delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_delay_us
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_low
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_clk_high
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_verify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clock_stop
</UL>

<P><STRONG><a name="[391]"></a>measure_clk</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, csu8rp3228.o(.text.measure_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = measure_clk &rArr; io_icsp_da_set_in &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_stop
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_start
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_hw_get_count
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_set_in
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_icsp_da_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_wdt_cali
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_osc_cali
</UL>

<P><STRONG><a name="[4dc]"></a>program_rolling_code</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, csu8rp3228.o(.text.program_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = program_rolling_code &rArr; cmd_program_mem &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_with_rolling_code
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_with_rolling_code
</UL>

<P><STRONG><a name="[394]"></a>program_with_rolling_code</STRONG> (Thumb, 958 bytes, Stack size 416 bytes, csu8rp3228.o(.text.program_with_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = program_with_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_rolling_code
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[393]"></a>program_without_rolling_code</STRONG> (Thumb, 870 bytes, Stack size 408 bytes, csu8rp3228.o(.text.program_without_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = program_without_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_program
</UL>

<P><STRONG><a name="[456]"></a>timer_hw_get_count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.timer_hw_get_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_hw_get_count &rArr; LL_TIM_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
</UL>

<P><STRONG><a name="[454]"></a>timer_hw_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, csu8rp3228.o(.text.timer_hw_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_hw_start &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
</UL>

<P><STRONG><a name="[455]"></a>timer_hw_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, csu8rp3228.o(.text.timer_hw_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_hw_stop &rArr; LL_TIM_DisableCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_clk
</UL>

<P><STRONG><a name="[398]"></a>verify_with_rolling_code</STRONG> (Thumb, 988 bytes, Stack size 416 bytes, csu8rp3228.o(.text.verify_with_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = verify_with_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_rolling_code
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_program_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
</UL>

<P><STRONG><a name="[397]"></a>verify_without_rolling_code</STRONG> (Thumb, 902 bytes, Stack size 416 bytes, csu8rp3228.o(.text.verify_without_rolling_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = verify_without_rolling_code &rArr; file_code_open &rArr; fopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_close
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_hex_get_code
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_code_open
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_mem
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csu8rp3228_verify
</UL>

<P><STRONG><a name="[32e]"></a>_DrawBitLine16BPP</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, guidrv_template.o(.text._DrawBitLine16BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine16BPP &rArr; st7789v_set_cursor &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[330]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 416 bytes, Stack size 112 bytes, guidrv_template.o(.text._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine1BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[331]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, guidrv_template.o(.text._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine2BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[332]"></a>_DrawBitLine32BPP</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, guidrv_template.o(.text._DrawBitLine32BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine32BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[333]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, guidrv_template.o(.text._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine4BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[334]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, guidrv_template.o(.text._DrawBitLine8BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _DrawBitLine8BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[175]"></a>_DrawBitmap</STRONG> (Thumb, 576 bytes, Stack size 112 bytes, guidrv_template.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine1BPP &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[176]"></a>_DrawHLine</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, guidrv_template.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; st7789v_fill &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[177]"></a>_DrawVLine</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, guidrv_template.o(.text._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _DrawVLine &rArr; _FillRect &rArr; st7789v_fill &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[178]"></a>_FillRect</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, guidrv_template.o(.text._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _FillRect &rArr; st7789v_fill &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[17f]"></a>_GetDevData</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, guidrv_template.o(.text._GetDevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GetDevData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[17d]"></a>_GetDevFunc</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, guidrv_template.o(.text._GetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDevFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[17e]"></a>_GetDevProp</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, guidrv_template.o(.text._GetDevProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _GetDevProp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[179]"></a>_GetPixelIndex</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, guidrv_template.o(.text._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _GetPixelIndex &rArr; st7789v_read_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_read_point
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[180]"></a>_GetRect</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, guidrv_template.o(.text._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GetRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[af]"></a>_Init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, guidrv_template.o(.text._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _Init &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[337]"></a>_InitOnce</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, guidrv_template.o(.text._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[b1]"></a>_Off</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, guidrv_template.o(.text._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b0]"></a>_On</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, guidrv_template.o(.text._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[b2]"></a>_SetLUTEntry</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, guidrv_template.o(.text._SetLUTEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SetLUTEntry &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[17c]"></a>_SetOrg</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, guidrv_template.o(.text._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[17a]"></a>_SetPixelIndex</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, guidrv_template.o(.text._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[ae]"></a>_SetSize</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, guidrv_template.o(.text._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _SetSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ac]"></a>_SetVRAMAddr</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, guidrv_template.o(.text._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _SetVRAMAddr &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[ad]"></a>_SetVSize</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, guidrv_template.o(.text._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _SetVSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[17b]"></a>_XorPixel</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, guidrv_template.o(.text._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _XorPixel &rArr; _SetPixelIndex &rArr; st7789v_draw_point &rArr; st7789v_set_window &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.rodata.GUIDRV_Template_API)
</UL>
<P><STRONG><a name="[403]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2c_sw.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[3fe]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c_sw.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_nack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_ack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[400]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c_sw.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_nack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_ack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[3ff]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, i2c_sw.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_nack
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_ack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[3f3]"></a>control</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, i2c_sw.o(.text.control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = control
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_control
</UL>

<P><STRONG><a name="[197]"></a>get_capabilities</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, i2c_sw.o(.text.get_capabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_capabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[3f4]"></a>get_data_count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_sw.o(.text.get_data_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_data_count
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_get_data_count
</UL>

<P><STRONG><a name="[196]"></a>get_version</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, i2c_sw.o(.text.get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_sw.o(.rodata.driver_i2c1_sw)
</UL>
<P><STRONG><a name="[3fd]"></a>i2c_io_ack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, i2c_sw.o(.text.i2c_io_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_io_ack &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[401]"></a>i2c_io_nack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, i2c_sw.o(.text.i2c_io_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_io_nack &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>

<P><STRONG><a name="[405]"></a>i2c_io_start</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, i2c_sw.o(.text.i2c_io_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_io_start &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_transmit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
</UL>

<P><STRONG><a name="[406]"></a>i2c_io_stop</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, i2c_sw.o(.text.i2c_io_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_transmit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
</UL>

<P><STRONG><a name="[407]"></a>i2c_io_wait_ack</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, i2c_sw.o(.text.i2c_io_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = i2c_io_wait_ack &rArr; i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_transmit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_receive
</UL>

<P><STRONG><a name="[3f6]"></a>initialize</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, i2c_sw.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_initialize
</UL>

<P><STRONG><a name="[3f7]"></a>master_receive</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, i2c_sw.o(.text.master_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = master_receive &rArr; i2c_io_wait_ack &rArr; i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_master_receive
</UL>

<P><STRONG><a name="[3f8]"></a>master_transmit</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, i2c_sw.o(.text.master_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = master_transmit &rArr; i2c_io_wait_ack &rArr; i2c_io_stop &rArr; delay_us &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_wait_ack
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_stop
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_start
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_io_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_master_transmit
</UL>

<P><STRONG><a name="[3f9]"></a>power_control</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c_sw.o(.text.power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power_control
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_power_control
</UL>

<P><STRONG><a name="[3fa]"></a>slave_receive</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, i2c_sw.o(.text.slave_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slave_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_slave_receive
</UL>

<P><STRONG><a name="[3fb]"></a>slave_transmit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, i2c_sw.o(.text.slave_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = slave_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_slave_transmit
</UL>

<P><STRONG><a name="[3fc]"></a>uninitialize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c_sw.o(.text.uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_sw_uninitialize
</UL>

<P><STRONG><a name="[51b]"></a>get_state</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, key.o(.text.get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
</UL>

<P><STRONG><a name="[517]"></a>get_timer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, key.o(.text.get_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key
</UL>

<P><STRONG><a name="[51c]"></a>set_state</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, key.o(.text.set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_callback
</UL>

<P><STRONG><a name="[b6]"></a>timer_callback</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, key.o(.text.timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = timer_callback &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_state
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text.key_init)
</UL>
<P><STRONG><a name="[b3]"></a>buzerr_timer_callback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, buzzer.o(.text.buzerr_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = buzerr_timer_callback &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.text.buzzer_init)
</UL>
<P><STRONG><a name="[3b4]"></a>LL_TIM_DisableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, delay.o(.text.LL_TIM_DisableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_DisableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[3b2]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, delay.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[3b3]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[3b0]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, delay.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[3b1]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, delay.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[4d1]"></a>power_ctrl_vdd_readback</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, power.o(.text.power_ctrl_vdd_readback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = power_ctrl_vdd_readback &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_set
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_get
</UL>

<P><STRONG><a name="[4d5]"></a>power_ctrl_vdd_setup</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, power.o(.text.power_ctrl_vdd_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = power_ctrl_vdd_setup &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_set
</UL>

<P><STRONG><a name="[4d8]"></a>power_ctrl_vpp_readback</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, power.o(.text.power_ctrl_vpp_readback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = power_ctrl_vpp_readback &rArr; HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_set
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_get
</UL>

<P><STRONG><a name="[4d9]"></a>power_ctrl_vpp_setup</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, power.o(.text.power_ctrl_vpp_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = power_ctrl_vpp_setup &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_voltage_set
</UL>

<P><STRONG><a name="[54b]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w25qxx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[54c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w25qxx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[4cd]"></a>page_program</STRONG> (Thumb, 1042 bytes, Stack size 224 bytes, w25qxx.o(.text.page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = page_program &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
</UL>

<P><STRONG><a name="[53d]"></a>transfer</STRONG> (Thumb, 718 bytes, Stack size 176 bytes, w25qxx.o(.text.transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
</UL>

<P><STRONG><a name="[4d0]"></a>wait_for_busy</STRONG> (Thumb, 654 bytes, Stack size 152 bytes, w25qxx.o(.text.wait_for_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = wait_for_busy &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_until_timeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
</UL>

<P><STRONG><a name="[4cf]"></a>wait_until_timeout</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, w25qxx.o(.text.wait_until_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_busy
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
</UL>

<P><STRONG><a name="[4ce]"></a>write_enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, w25qxx.o(.text.write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_program
</UL>

<P><STRONG><a name="[14c]"></a>EraseChip</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flash.o(.text.EraseChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = EraseChip &rArr; w25qxx_chip_erase &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_chip_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[14b]"></a>EraseSector</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spi_flash.o(.text.EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = EraseSector &rArr; w25qxx_erase_sector &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[145]"></a>GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_flash.o(.text.GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[14e]"></a>GetInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_flash.o(.text.GetInfo))
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[14d]"></a>GetStatus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_flash.o(.text.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[144]"></a>GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_flash.o(.text.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[146]"></a>Initialize</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, spi_flash.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Initialize &rArr; w25qxx_open &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_open
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[148]"></a>PowerControl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_flash.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = PowerControl &rArr; w25qxx_power_control &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[14a]"></a>ProgramData</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, spi_flash.o(.text.ProgramData))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ProgramData &rArr; w25qxx_program &rArr; page_program &rArr; write_enable &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_program
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[149]"></a>ReadData</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, spi_flash.o(.text.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ReadData &rArr; w25qxx_read &rArr; transfer &rArr; wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[147]"></a>Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_flash.o(.text.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.rodata.Driver_Flash0)
</UL>
<P><STRONG><a name="[544]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hid.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[545]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hid.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_init
</UL>

<P><STRONG><a name="[310]"></a>setReport</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, hid.o(.text.setReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = setReport &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID0_SetReport
</UL>

<P><STRONG><a name="[4ed]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, st7789v.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[4ee]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, st7789v.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[d9]"></a>lcd_back_light_timer_callback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_back_light_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcd_back_light_timer_callback &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789v.o(.text.st7789v_init)
</UL>
<P><STRONG><a name="[43e]"></a>lcd_ctrl_display_on</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st7789v.o(.text.lcd_ctrl_display_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_display_on &rArr; lcd_io_write_cmd &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[440]"></a>lcd_ctrl_negative_vol_gamma_ctrl</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_negative_vol_gamma_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_negative_vol_gamma_ctrl &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[442]"></a>lcd_ctrl_pixel_format</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_pixel_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_pixel_format &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[443]"></a>lcd_ctrl_positive_vol_gamma_ctrl</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_positive_vol_gamma_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_positive_vol_gamma_ctrl &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[444]"></a>lcd_ctrl_power</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_power &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[445]"></a>lcd_ctrl_read_id</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, st7789v.o(.text.lcd_ctrl_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_read_id &rArr; lcd_io_transfer &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[447]"></a>lcd_ctrl_reset</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, st7789v.o(.text.lcd_ctrl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_ctrl_reset &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[448]"></a>lcd_ctrl_sleep_out</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_sleep_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_sleep_out &rArr; lcd_io_write_cmd &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[449]"></a>lcd_ctrl_vcom_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7789v.o(.text.lcd_ctrl_vcom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_vcom_set &rArr; lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[44a]"></a>lcd_ctrl_view_port_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st7789v.o(.text.lcd_ctrl_view_port_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lcd_ctrl_view_port_enable &rArr; lcd_io_write_cmd &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
</UL>

<P><STRONG><a name="[44b]"></a>lcd_io_mem_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, st7789v.o(.text.lcd_io_mem_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lcd_io_mem_write &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_fill
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_draw_point
</UL>

<P><STRONG><a name="[446]"></a>lcd_io_transfer</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, st7789v.o(.text.lcd_io_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lcd_io_transfer &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_read_point
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_read_id
</UL>

<P><STRONG><a name="[44c]"></a>lcd_io_wait_until_timeout</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, st7789v.o(.text.lcd_io_wait_until_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_data
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_write_cmd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_transfer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_mem_write
</UL>

<P><STRONG><a name="[43f]"></a>lcd_io_write_cmd</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, st7789v.o(.text.lcd_io_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lcd_io_write_cmd &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_cursor
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_fill
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_draw_point
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_window
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_view_port_enable
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_vcom_set
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_sleep_out
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_power
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_positive_vol_gamma_ctrl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_pixel_format
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_negative_vol_gamma_ctrl
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_display_on
</UL>

<P><STRONG><a name="[441]"></a>lcd_io_write_data</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, st7789v.o(.text.lcd_io_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lcd_io_write_data &rArr; lcd_io_wait_until_timeout &rArr; dbg_unlock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_io_wait_until_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_cursor
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789v_set_window
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_vcom_set
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_power
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_positive_vol_gamma_ctrl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_pixel_format
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_negative_vol_gamma_ctrl
</UL>

<P><STRONG><a name="[459]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_delay.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[458]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_delay.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[b8]"></a>svcRtxDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelayCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[45c]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_kernel.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>

<P><STRONG><a name="[45b]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_kernel.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>

<P><STRONG><a name="[45d]"></a>IsPrivileged</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, rtx_kernel.o(.text.IsPrivileged))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsPrivileged
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[2f2]"></a>SVC_Setup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtx_kernel.o(.text.SVC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[2f3]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
</UL>

<P><STRONG><a name="[4ef]"></a>osRtxKernelState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelState))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[b9]"></a>svcRtxKernelGetState</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelState
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[ba]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[bb]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[bc]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 1008 bytes, Stack size 40 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[bd]"></a>svcRtxKernelStart</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[33c]"></a>os_kernel_is_active</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[471]"></a>MemBlockPtr</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rtx_memory.o(.text.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[472]"></a>MemHeadPtr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_memory.o(.text.MemHeadPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemHeadPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[47d]"></a>atomic_dec32</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, rtx_mempool.o(.text.atomic_dec32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[479]"></a>atomic_inc32</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, rtx_mempool.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[478]"></a>atomic_link_get</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, rtx_mempool.o(.text.atomic_link_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_link_get
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[47c]"></a>atomic_link_put</STRONG> (Thumb, 56 bytes, Stack size 44 bytes, rtx_mempool.o(.text.atomic_link_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[465]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_msgqueue.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[464]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_msgqueue.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2db]"></a>MessageQueueGet</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MessageQueueGet &rArr; atomic_wr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2de]"></a>MessageQueuePut</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MessageQueuePut &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[480]"></a>MessageQueueRemove</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueueRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2dc]"></a>atomic_dec32_nz</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, rtx_msgqueue.o(.text.atomic_dec32_nz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_dec32_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[2df]"></a>atomic_inc32</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, rtx_msgqueue.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[2dd]"></a>atomic_wr8</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.atomic_wr8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[41a]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[421]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, rtx_msgqueue.o(.text.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[41b]"></a>osRtxMessageQueueId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMessageQueueId
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[da]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[41d]"></a>osRtxObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[4f9]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[be]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 456 bytes, Stack size 112 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[bf]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 680 bytes, Stack size 104 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[c0]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 422 bytes, Stack size 104 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[46a]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_mutex.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[469]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_mutex.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[4fc]"></a>osRtxMutexId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxMutexId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMutexId
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[487]"></a>osRtxObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[4fd]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[c1]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[c2]"></a>svcRtxMutexDelete</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[c3]"></a>svcRtxMutexNew</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[c4]"></a>svcRtxMutexRelease</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[4b7]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_semaphore.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[4b6]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_semaphore.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2f4]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SemaphoreTokenDecrement &rArr; atomic_dec16_nz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[2f6]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SemaphoreTokenIncrement &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[2f5]"></a>atomic_dec16_nz</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, rtx_semaphore.o(.text.atomic_dec16_nz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[2f7]"></a>atomic_inc16_lt</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, rtx_semaphore.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[425]"></a>isrRtxSemaphoreAcquire</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, rtx_semaphore.o(.text.isrRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = isrRtxSemaphoreAcquire &rArr; SemaphoreTokenDecrement &rArr; atomic_dec16_nz
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[42a]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rtx_semaphore.o(.text.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[42b]"></a>osRtxObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[426]"></a>osRtxSemaphoreId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphoreId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxSemaphoreId
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[db]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[503]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[c8]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[c9]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[ca]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[cb]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[48f]"></a>SetPendSV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[433]"></a>atomic_dec16_nz</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, rtx_system.o(.text.atomic_dec16_nz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[434]"></a>atomic_inc16_lim</STRONG> (Thumb, 60 bytes, Stack size 44 bytes, rtx_system.o(.text.atomic_inc16_lim))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[437]"></a>atomic_inc16_lt</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, rtx_system.o(.text.atomic_inc16_lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[432]"></a>isr_queue_get</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_system.o(.text.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = isr_queue_get &rArr; atomic_inc16_lim
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[436]"></a>isr_queue_put</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, rtx_system.o(.text.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lt
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[48a]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxEventFlagsObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxEventFlagsObject
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[4b0]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[48c]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolObject
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[48d]"></a>osRtxMessageObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxMessageObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMessageObject
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[435]"></a>osRtxObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[48b]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxSemaphoreObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxSemaphoreObject
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[489]"></a>osRtxThreadObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_system.o(.text.osRtxThreadObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[4be]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_thread.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[4bd]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_thread.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[4a7]"></a>StackOffsetR0</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_thread.o(.text.StackOffsetR0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackOffsetR0
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
</UL>

<P><STRONG><a name="[2fa]"></a>ThreadFlagsCheck</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ThreadFlagsCheck &rArr; atomic_chk32_any
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_any
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[2fd]"></a>ThreadFlagsSet</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, rtx_thread.o(.text.ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ThreadFlagsSet &rArr; atomic_set32
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[2fb]"></a>atomic_chk32_all</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, rtx_thread.o(.text.atomic_chk32_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[2fc]"></a>atomic_chk32_any</STRONG> (Thumb, 60 bytes, Stack size 44 bytes, rtx_thread.o(.text.atomic_chk32_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_chk32_any
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[2fe]"></a>atomic_set32</STRONG> (Thumb, 48 bytes, Stack size 44 bytes, rtx_thread.o(.text.atomic_set32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>

<P><STRONG><a name="[42d]"></a>isrRtxThreadFlagsSet</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, rtx_thread.o(.text.isrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[4a0]"></a>osRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[430]"></a>osRtxObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[490]"></a>osRtxThreadBlock</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[4ad]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[4ae]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[4a3]"></a>osRtxThreadFree</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4a1]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[42e]"></a>osRtxThreadId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadId
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[496]"></a>osRtxThreadListRoot</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[491]"></a>osRtxThreadObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[dd]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[507]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadSetRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadSetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[cd]"></a>svcRtxThreadExit</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[ce]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[cf]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[d0]"></a>svcRtxThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[d1]"></a>svcRtxThreadNew</STRONG> (Thumb, 1054 bytes, Stack size 104 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPSR_InitVal
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[d2]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[d3]"></a>svcRtxThreadYield</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut &rArr; osRtxThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[50c]"></a>xPSR_InitVal</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, rtx_thread.o(.text.xPSR_InitVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xPSR_InitVal
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[4c5]"></a>IsIrqMasked</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtx_timer.o(.text.IsIrqMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
</UL>

<P><STRONG><a name="[4c4]"></a>IsIrqMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rtx_timer.o(.text.IsIrqMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsIrqMode
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
</UL>

<P><STRONG><a name="[4b4]"></a>TimerInsert</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[510]"></a>TimerRemove</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[4b3]"></a>TimerUnlink</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[4b1]"></a>osRtxMessageQueueId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxMessageQueueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMessageQueueId
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[50e]"></a>osRtxTimerId</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxTimerId
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerIsRunning
</UL>

<P><STRONG><a name="[c7]"></a>osRtxTimerTick</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[d4]"></a>svcRtxTimerIsRunning</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rtx_timer.o(.text.svcRtxTimerIsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxTimerIsRunning &rArr; EvrRtxTimerIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerIsRunning
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerIsRunning)
</UL>
<P><STRONG><a name="[d5]"></a>svcRtxTimerNew</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[d6]"></a>svcRtxTimerStart</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerId
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[d7]"></a>svcRtxTimerStop</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rtx_timer.o(.text.svcRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxTimerStop &rArr; EvrRtxTimerError
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStopped
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerId
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStop)
</UL>
<P><STRONG><a name="[158]"></a>SPI1_Control</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[157]"></a>SPI1_GetDataCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_GetDataCount &rArr; SPI_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[159]"></a>SPI1_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[151]"></a>SPI1_Initialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[153]"></a>SPI1_PowerControl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[155]"></a>SPI1_Receive</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[154]"></a>SPI1_Send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI1_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[156]"></a>SPI1_Transfer</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, spi_stm32f4xx.o(.text.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[152]"></a>SPI1_Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
</UL>
<P><STRONG><a name="[161]"></a>SPI2_Control</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SPI2_Control &rArr; SPI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[160]"></a>SPI2_GetDataCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_GetDataCount &rArr; SPI_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[162]"></a>SPI2_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15a]"></a>SPI2_Initialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI2_Initialize &rArr; SPI_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15c]"></a>SPI2_PowerControl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SPI2_PowerControl &rArr; SPI_PowerControl &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15e]"></a>SPI2_Receive</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_Receive &rArr; SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15d]"></a>SPI2_Send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_Send &rArr; SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15f]"></a>SPI2_Transfer</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, spi_stm32f4xx.o(.text.SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI2_Transfer &rArr; SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[15b]"></a>SPI2_Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_Uninitialize &rArr; SPI_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[150]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_stm32f4xx.o(.text.SPIX_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIX_GetCapabilities
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
<LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[14f]"></a>SPIX_GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_stm32f4xx.o(.text.SPIX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIX_GetVersion
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spi_stm32f4xx.o(.rodata.Driver_SPI1)
<LI> spi_stm32f4xx.o(.rodata.Driver_SPI2)
</UL>
<P><STRONG><a name="[2e5]"></a>SPI_Control</STRONG> (Thumb, 1656 bytes, Stack size 120 bytes, spi_stm32f4xx.o(.text.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[2e6]"></a>SPI_GetDataCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetDataCount
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetDataCount
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetDataCount
</UL>

<P><STRONG><a name="[2e7]"></a>SPI_GetStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_stm32f4xx.o(.text.SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[2e8]"></a>SPI_IRQHandler</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, spi_stm32f4xx.o(.text.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_IRQHandler &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[2e9]"></a>SPI_Initialize</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, spi_stm32f4xx.o(.text.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Initialize
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[2f1]"></a>SPI_PeripheralReset</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[2ea]"></a>SPI_PowerControl</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, spi_stm32f4xx.o(.text.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SPI_PowerControl &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_PowerControl
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[2eb]"></a>SPI_Receive</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, spi_stm32f4xx.o(.text.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Receive &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Receive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[2ef]"></a>SPI_RxData</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>SPI_Send</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, spi_stm32f4xx.o(.text.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Send &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[2ed]"></a>SPI_Transfer</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, spi_stm32f4xx.o(.text.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Transfer &rArr; SPI_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Transfer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[2f0]"></a>SPI_TxData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, spi_stm32f4xx.o(.text.SPI_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>SPI_Uninitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_stm32f4xx.o(.text.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Uninitialize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[168]"></a>USBD_DeviceConnect</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_DeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_DeviceConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[169]"></a>USBD_DeviceDisconnect</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_DeviceDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_DeviceDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[16a]"></a>USBD_DeviceGetState</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_DeviceGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_DeviceGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[16b]"></a>USBD_DeviceRemoteWakeup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_fs_stm32f4xx.o(.text.USBD_DeviceRemoteWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_DeviceRemoteWakeup &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[16c]"></a>USBD_DeviceSetAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usbd_fs_stm32f4xx.o(.text.USBD_DeviceSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_DeviceSetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[16e]"></a>USBD_EndpointConfigure</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_EndpointConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[309]"></a>USBD_EndpointReadSet</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointReadSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_EndpointReadSet &rArr; USBD_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransfer
</UL>

<P><STRONG><a name="[170]"></a>USBD_EndpointStall</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_EndpointStall &rArr; USBD_FlushInEpFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[171]"></a>USBD_EndpointTransfer</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_EndpointTransfer &rArr; USBD_EndpointReadSet &rArr; USBD_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[173]"></a>USBD_EndpointTransferAbort</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EndpointTransferAbort &rArr; USBD_FlushInEpFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[172]"></a>USBD_EndpointTransferGetResult</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EndpointTransferGetResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[16f]"></a>USBD_EndpointUnconfigure</STRONG> (Thumb, 806 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx.o(.text.USBD_EndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EndpointUnconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[30a]"></a>USBD_FlushInEpFifo</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, usbd_fs_stm32f4xx.o(.text.USBD_FlushInEpFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_FlushInEpFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferAbort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStall
</UL>

<P><STRONG><a name="[164]"></a>USBD_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[174]"></a>USBD_GetFrameNumber</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_GetFrameNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WriteToFifo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointReadSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[163]"></a>USBD_GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbd_fs_stm32f4xx.o(.text.USBD_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[165]"></a>USBD_Initialize</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, usbd_fs_stm32f4xx.o(.text.USBD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[167]"></a>USBD_PowerControl</STRONG> (Thumb, 794 bytes, Stack size 40 bytes, usbd_fs_stm32f4xx.o(.text.USBD_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_PowerControl &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspDeInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[30e]"></a>USBD_ReadFromFifo</STRONG> (Thumb, 396 bytes, Stack size 44 bytes, usbd_fs_stm32f4xx.o(.text.USBD_ReadFromFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_ReadFromFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[16d]"></a>USBD_ReadSetupPacket</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, usbd_fs_stm32f4xx.o(.text.USBD_ReadSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_ReadSetupPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[30d]"></a>USBD_Reset</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, usbd_fs_stm32f4xx.o(.text.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_Reset &rArr; USBD_FlushInEpFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FlushInEpFifo
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
</UL>

<P><STRONG><a name="[166]"></a>USBD_Uninitialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_fs_stm32f4xx.o(.text.USBD_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_fs_stm32f4xx.o(.rodata.Driver_USBD0)
</UL>
<P><STRONG><a name="[30f]"></a>USBD_WriteToFifo</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, usbd_fs_stm32f4xx.o(.text.USBD_WriteToFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_WriteToFifo &rArr; USBD_GetFrameNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetFrameNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_IRQ
</UL>

<P><STRONG><a name="[28a]"></a>ADC_Init</STRONG> (Thumb, 396 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[2a3]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2b7]"></a>SysTick_Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[2a1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[2a2]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2a4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[2a5]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[2bd]"></a>UART_SetConfig</STRONG> (Thumb, 1184 bytes, Stack size 240 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[32a]"></a>USB_CoreReset</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[b4]"></a>NOR0_DriverEvent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_config.o(.text.NOR0_DriverEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NOR0_DriverEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.text.fs_config_flash)
</UL>
<P><STRONG><a name="[3e6]"></a>fs_config_flash</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fs_config.o(.text.fs_config_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_config_flash &rArr; fs_mutex_new &rArr; osMutexNew &rArr; EvrRtxMutexError
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[5a5]"></a>_AddFreeMemory</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gui_alloc.o(i._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[5a2]"></a>_Alloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gui_alloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = _Alloc &rArr;  _InitOnce (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[754]"></a>_EnlargeBlocks</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gui_alloc.o(i._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[738]"></a>_GetMinIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i._GetMinIndex))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[5a7]"></a>_InitOnce</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gui_alloc.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[73a]"></a>_PopFreeBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_alloc.o(i._PopFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _PopFreeBlock &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[5a6]"></a>_PushFreeBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_alloc.o(i._PushFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _PushFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[5a9]"></a>_RemoveFreeBlock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_alloc.o(i._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[5a8]"></a>_RemoveHoles</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, gui_alloc.o(i._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[739]"></a>_WriteTagData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_alloc.o(i._WriteTagData))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[5f0]"></a>_InitContext</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gui_core.o(i._InitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _InitContext
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[e6]"></a>_OnExit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_core.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(i.GUI__Config)
</UL>
<P><STRONG><a name="[62a]"></a>_IncPointer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_onkey.o(i._IncPointer))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncReadPointer
</UL>

<P><STRONG><a name="[5ba]"></a>_IncReadPointer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_onkey.o(i._IncReadPointer))
<BR><BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[10b]"></a>_Color2IndexBulk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, guicc_m565.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>_Color2Index_M565</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guicc_m565.o(i._Color2Index_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2Index_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m565.o(i._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>_Index2ColorBulk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, guicc_m565.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[655]"></a>_GetDevProp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i._GetDevProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>

<P><STRONG><a name="[65d]"></a>_GetMaxValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i._GetMaxValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
</UL>

<P><STRONG><a name="[746]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[747]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[748]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, guidev_16.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[111]"></a>_DrawBitmap</STRONG> (Thumb, 716 bytes, Stack size 112 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine2BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_DrawVLine</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>_FillRect</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>_GetDevProp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_16.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>_SetOrg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_16.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>_SetPixelIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[745]"></a>_XY2PTR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_16.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[117]"></a>_XorPixel</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[55d]"></a>_OnButtonPressed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, button.o(i._OnButtonPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _OnButtonPressed &rArr; WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
</UL>

<P><STRONG><a name="[55e]"></a>_OnButtonReleased</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, button.o(i._OnButtonReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _OnButtonReleased &rArr; WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
</UL>

<P><STRONG><a name="[a]"></a>_OnTouchDefault</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, button.o(i._OnTouchDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _OnTouchDefault &rArr; _OnButtonReleased &rArr; WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>FRAMEWIN__cbClient</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, framewin.o(i.FRAMEWIN__cbClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN__cbClient &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin.o(i.FRAMEWIN_CreateUser)
</UL>
<P><STRONG><a name="[57e]"></a>_OnChildHasFocus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, framewin.o(i._OnChildHasFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _OnChildHasFocus &rArr; _SetActive &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[577]"></a>_OnTouch</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, framewin.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _OnTouch &rArr; WM_SetCaptureMove &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCaptureMove
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_Callback
</UL>

<P><STRONG><a name="[585]"></a>_SetActive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, framewin.o(i._SetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _SetActive &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetActive
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnChildHasFocus
</UL>

<P><STRONG><a name="[684]"></a>_AddScrollbar</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, multipage.o(i._AddScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetEffect
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Create
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveChildTo
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
</UL>

<P><STRONG><a name="[680]"></a>_AdjustRect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, multipage.o(i._AdjustRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _AdjustRect
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcClientRect
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
</UL>

<P><STRONG><a name="[f1]"></a>_ClientCallback</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, multipage.o(i._ClientCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = _ClientCallback &rArr; _MoveSel &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage.o(i.MULTIPAGE_CreateUser)
</UL>
<P><STRONG><a name="[679]"></a>_GetEnable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, multipage.o(i._GetEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GetEnable &rArr; GUI_ARRAY_GetpItemLocked &rArr; GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
</UL>

<P><STRONG><a name="[671]"></a>_GetScrollbarH</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, multipage.o(i._GetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = _GetScrollbarH &rArr; WM_GetId &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__DeleteScrollbar
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScrollbar
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveSel
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddScrollbar
</UL>

<P><STRONG><a name="[73d]"></a>_MoveSel</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, multipage.o(i._MoveSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = _MoveSel &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientCallback
</UL>

<P><STRONG><a name="[66e]"></a>_OnTouch</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, multipage.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = _OnTouch &rArr; MULTIPAGE_SelectPage &rArr; MULTIPAGE__UpdatePositions &rArr; _AddScrollbar &rArr; SCROLLBAR_Create &rArr; SCROLLBAR_CreateUser &rArr; SCROLLBAR__InvalidatePartner &rArr; WM_GetScrollPartner &rArr; WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWinEx
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_Callback
</UL>

<P><STRONG><a name="[685]"></a>_SetScrollbar</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, multipage.o(i._SetScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _SetScrollbar &rArr; _GetScrollbarH &rArr; WM_GetId &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetPageSize
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetNumItems
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetScrollbarH
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__UpdatePositions
</UL>

<P><STRONG><a name="[676]"></a>_ShowPage</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, multipage.o(i._ShowPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _ShowPage &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocusedWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SelectPage
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DeletePage
</UL>

<P><STRONG><a name="[68e]"></a>_GetNextInGroup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio.o(i._GetNextInGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _GetNextInGroup &rArr; _IsInGroup &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsInGroup
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetGroupId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
</UL>

<P><STRONG><a name="[f3]"></a>_HandleSetValue</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, radio.o(i._HandleSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _HandleSetValue &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__SetValue
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsInGroup
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextInGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_SetGroupId)
</UL>
<P><STRONG><a name="[75b]"></a>_IsInGroup</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, radio.o(i._IsInGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _IsInGroup &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HandleSetValue
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextInGroup
</UL>

<P><STRONG><a name="[689]"></a>_OnTouch</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, radio.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _OnTouch &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetValue
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Callback
</UL>

<P><STRONG><a name="[6a1]"></a>_Paint</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, text.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringInRectWrap &rArr; GUI_WrapGetNumLines &rArr; GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[734]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wm.o(i.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[6fa]"></a>_DeleteAllChildren</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm.o(i._DeleteAllChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[72c]"></a>_DesktopHandle2Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm.o(i._DesktopHandle2Index))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[752]"></a>_DrawNext</STRONG> (Thumb, 82 bytes, Stack size 136 bytes, wm.o(i._DrawNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
</UL>

<P><STRONG><a name="[6fd]"></a>_Exec1Draw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm.o(i._Exec1Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = _Exec1Draw &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[6fc]"></a>_Exec1Input</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm.o(i._Exec1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _Exec1Input &rArr; GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[72f]"></a>_FindNext_IVR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, wm.o(i._FindNext_IVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[758]"></a>_Findx0</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[759]"></a>_Findx1</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[757]"></a>_Findy1</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[715]"></a>_Invalidate1Abs</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RectIsNZ
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[ff]"></a>_OnExit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wm.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[735]"></a>_Paint1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i._Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Paint1
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[737]"></a>_Paint1Trans</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wm.o(i._Paint1Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Paint1Trans &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[736]"></a>_PaintTransChildren</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wm.o(i._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[72b]"></a>_SetClipRectUserIntersect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm.o(i._SetClipRectUserIntersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[fe]"></a>_cbBackWin</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm.o(i._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _cbBackWin &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[100]"></a>_cbPaintMemDev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm.o(i._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM__Paint)
</UL>
<P><STRONG><a name="[701]"></a>_GetDialogItem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm_lib.o(i._GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[775]"></a>addr_of_block</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_efs.o(i.addr_of_block))
<BR><BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_write
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_check
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rd
</UL>

<P><STRONG><a name="[77b]"></a>addr_of_sign</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_efs.o(i.addr_of_sign))
<BR><BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_BlockInvalid
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_alloc
</UL>

<P><STRONG><a name="[774]"></a>block_erase</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_efs.o(i.block_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = block_erase &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
</UL>

<P><STRONG><a name="[776]"></a>block_read</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, fs_efs.o(i.block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rd
</UL>

<P><STRONG><a name="[777]"></a>block_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_efs.o(i.block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_write
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
</UL>

<P><STRONG><a name="[778]"></a>ed_alloc_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_efs.o(i.ed_alloc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_write
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
</UL>

<P><STRONG><a name="[77c]"></a>ed_copy</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, fs_efs.o(i.ed_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ed_copy &rArr; ed_write &rArr; ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_write
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_read
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
</UL>

<P><STRONG><a name="[781]"></a>ed_delete</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, fs_efs.o(i.ed_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ed_delete &rArr; efs_BlockInvalid &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_BlockInvalid
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
</UL>

<P><STRONG><a name="[784]"></a>ed_get_next</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, fs_efs.o(i.ed_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ed_get_next &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
</UL>

<P><STRONG><a name="[780]"></a>ed_write</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, fs_efs.o(i.ed_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ed_write &rArr; ed_alloc_block &rArr; sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
</UL>

<P><STRONG><a name="[785]"></a>efs_AllocBlock</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fs_efs.o(i.efs_AllocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_is_busy
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
</UL>

<P><STRONG><a name="[783]"></a>efs_BlockInvalid</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fs_efs.o(i.efs_BlockInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = efs_BlockInvalid &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
</UL>

<P><STRONG><a name="[787]"></a>efs_get_freeMem</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, fs_efs.o(i.efs_get_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
</UL>

<P><STRONG><a name="[786]"></a>efs_is_busy</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, fs_efs.o(i.efs_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = efs_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
</UL>

<P><STRONG><a name="[794]"></a>efs_mark_fileMem</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, fs_efs.o(i.efs_mark_fileMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rd
</UL>

<P><STRONG><a name="[788]"></a>efs_mark_freeMem</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_efs.o(i.efs_mark_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = efs_mark_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
</UL>

<P><STRONG><a name="[77f]"></a>efs_rd</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, fs_efs.o(i.efs_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = efs_rd &rArr; efs_mark_fileMem &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_fileMem
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_read
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
</UL>

<P><STRONG><a name="[78a]"></a>efs_vol_chk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_efs.o(i.efs_vol_chk))
<BR><BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_check
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_analyse
</UL>

<P><STRONG><a name="[798]"></a>efs_wr</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, fs_efs.o(i.efs_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
</UL>

<P><STRONG><a name="[782]"></a>falloc_read</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_efs.o(i.falloc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_fileMem
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_BlockInvalid
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_get_next
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_check
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_analyse
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_alloc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
</UL>

<P><STRONG><a name="[77d]"></a>falloc_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fs_efs.o(i.falloc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = falloc_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_write
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
</UL>

<P><STRONG><a name="[796]"></a>file_create</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, fs_efs.o(i.file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = file_create &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_freeMem
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_is_busy
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_get_freeMem
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_write
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_alloc
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
</UL>

<P><STRONG><a name="[78f]"></a>file_delete</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, fs_efs.o(i.file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = file_delete &rArr; efs_BlockInvalid &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_is_busy
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_BlockInvalid
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_erase
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
</UL>

<P><STRONG><a name="[78e]"></a>file_find</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, fs_efs.o(i.file_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = file_find &rArr; block_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_read
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_block
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
</UL>

<P><STRONG><a name="[79f]"></a>file_id_alloc</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, fs_efs.o(i.file_id_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = file_id_alloc &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_of_sign
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
</UL>

<P><STRONG><a name="[78d]"></a>file_name_validate</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_efs.o(i.file_name_validate))
<BR><BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
</UL>

<P><STRONG><a name="[77e]"></a>file_size_get</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, fs_efs.o(i.file_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = file_size_get &rArr; sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_read
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;falloc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_copy
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
</UL>

<P><STRONG><a name="[779]"></a>sign_read</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_efs.o(i.sign_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sign_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mark_fileMem
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_get_next
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_delete
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_check
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_analyse
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_size_get
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_delete
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
</UL>

<P><STRONG><a name="[77a]"></a>sign_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fs_efs.o(i.sign_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sign_write &rArr; block_write &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_write
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_AllocBlock
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ed_alloc_block
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_defrag
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_create
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wr
</UL>

<P><STRONG><a name="[7a0]"></a>fs_component_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_component_init &rArr; fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[6a3]"></a>USBD_CheckDevice</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_CheckDevice))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Uninitialize
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetState
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Disconnect
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[6a5]"></a>USBD_Core</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[6a8]"></a>USBD_Endpoint0</STRONG> (Thumb, 886 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Endpoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_CDC_ReqToIF
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToIF
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToEP
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_CDC_ReqToIF
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToIF
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToEP
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[6c8]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ReqGetDescriptor &rArr; USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6d0]"></a>USBD_ReqGetMSDescriptor</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ReqGetMSDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ReqGetMSDescriptor &rArr; USBD_Endpoint0_ReqGetExtProp_CC
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetExtProp_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c6]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, usbd_lib_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c7]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ClearFeatureStall_MSC
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6c9]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6ca]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[6a6]"></a>USBD_ResetCore</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ResetCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ResetCore
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[6d8]"></a>USBD_HID_CheckInstance</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_lib_hid.o(i.USBD_HID_CheckInstance))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetReport
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetProtocol
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetReport
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetProtocol
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetIdle
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
</UL>

<P><STRONG><a name="[6d9]"></a>USBD_HID_EpIntIn</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_EpIntIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
</UL>

<P><STRONG><a name="[6da]"></a>USBD_HID_EpIntOut</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_EpIntOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = USBD_HID_EpIntOut &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put &rArr; atomic_inc16_lt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
</UL>

<P><STRONG><a name="[59d]"></a>_GetTaskNo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_task.o(i._GetTaskNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>

<P><STRONG><a name="[e1]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(i.GUITASK_Init)
</UL>
<P><STRONG><a name="[11f]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[638]"></a>_WaitEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i._WaitEvent))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[122]"></a>_SetBkColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>_SetColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd.o(i._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>_OnExit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_color.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(i.LCD_InitColors)
</UL>
<P><STRONG><a name="[60b]"></a>_Min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_banding.o(i._Min))
<BR><BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[613]"></a>_CreateStaticDevice</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, guidev_staticdevices.o(i._CreateStaticDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[73f]"></a>_Convert16</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert16 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[741]"></a>_Convert8</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert8 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[61c]"></a>_WriteToActiveOpaque_8</STRONG> (Thumb, 824 bytes, Stack size 168 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveOpaque_8 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[61d]"></a>_WriteToActiveOpaque_HT</STRONG> (Thumb, 826 bytes, Stack size 144 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_HT))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveOpaque_HT &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[17]"></a>_Create</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, button_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_Paint</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, button_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, framewin_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_GetBorderSize</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, framewin_skin.o(i._GetBorderSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GetBorderSize
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>_Paint</STRONG> (Thumb, 264 bytes, Stack size 136 bytes, framewin_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>_Create</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, multipage_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skin.o(.data)
</UL>
<P><STRONG><a name="[67d]"></a>_IsBetween</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, multipage_skin.o(i._IsBetween))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
</UL>

<P><STRONG><a name="[1b]"></a>_Paint</STRONG> (Thumb, 1312 bytes, Stack size 224 bytes, multipage_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; MULTIPAGE_SKIN__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetTabBarRect
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetPagePos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skin.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, radio_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skin.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>_Paint</STRONG> (Thumb, 452 bytes, Stack size 160 bytes, radio_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skin.o(.data)
</UL>
<P><STRONG><a name="[742]"></a>_DeleteTimer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scrollbar.o(i._DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _DeleteTimer &rArr; WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouch
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTimer
</UL>

<P><STRONG><a name="[697]"></a>_OnTimer</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, scrollbar.o(i._OnTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _OnTimer &rArr; SCROLLBAR_AddValue &rArr; SCROLLBAR_SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_AddValue
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[694]"></a>_OnTouch</STRONG> (Thumb, 526 bytes, Stack size 104 bytes, scrollbar.o(i._OnTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _OnTouch &rArr; WM_SetCapture &rArr; WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetValue
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound32
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_Callback
</UL>

<P><STRONG><a name="[6f0]"></a>_BringToTop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_bringtotop.o(i._BringToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _BringToTop &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[101]"></a>_cbInvalidateOne</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_bringtotop.o(i._cbInvalidateOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _cbInvalidateOne &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_bringtotop.o(i._BringToTop)
</UL>
<P><STRONG><a name="[70a]"></a>_GetDefaultWin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_getwindowsize.o(i._GetDefaultWin))
<BR><BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>

<P><STRONG><a name="[732]"></a>_MoveDescendents</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, wm_move.o(i._MoveDescendents))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[75f]"></a>_Screen2hWin</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_screen2win.o(i._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInWindow
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[71e]"></a>_Screen2hWinStop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_screen2win.o(i._Screen2hWinStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWinEx
</UL>

<P><STRONG><a name="[727]"></a>_GetNextChild</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_setfocusonnextchild.o(i._GetNextChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetNextChild
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
</UL>

<P><STRONG><a name="[728]"></a>_GetPrevChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_setfocusonprevchild.o(i._GetPrevChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _GetPrevChild &rArr; WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[fd]"></a>_cbTimer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wm_timer.o(i._cbTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _cbTimer &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_timer.o(i.WM_CreateTimer)
</UL>
<P><STRONG><a name="[e9]"></a>_OnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui__alpha.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__GetAlphaBuffer)
</UL>
<P><STRONG><a name="[646]"></a>_DrawTwinArc2</STRONG> (Thumb, 262 bytes, Stack size 88 bytes, gui__drawtwinarc.o(i._DrawTwinArc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _DrawTwinArc2 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
</UL>

<P><STRONG><a name="[647]"></a>_DrawTwinArc4</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, gui__drawtwinarc.o(i._DrawTwinArc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>

<P><STRONG><a name="[649]"></a>_FillTrippleArc</STRONG> (Thumb, 572 bytes, Stack size 104 bytes, gui__drawtwinarc.o(i._FillTrippleArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTrippleArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
</UL>

<P><STRONG><a name="[756]"></a>_GetTrippleArcPara</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i._GetTrippleArcPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GetTrippleArcPara
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
</UL>

<P><STRONG><a name="[753]"></a>_GetTwinArcPara</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui__drawtwinarc.o(i._GetTwinArcPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetTwinArcPara
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>

<P><STRONG><a name="[23]"></a>_GetCharWrap</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, gui__wrap.o(i._GetCharWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _GetCharWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__wrap.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>_GetWordWrap</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, gui__wrap.o(i._GetWordWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _GetWordWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__wrap.o(.data)
</UL>
<P><STRONG><a name="[652]"></a>_WrapGetNumCharsDisp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui__wrap.o(i._WrapGetNumCharsDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WrapGetNumCharsDisp &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[640]"></a>_DispLine</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gui_charline.o(i._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DispLine &rArr; GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[24]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(i._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data)
</UL>
<P><STRONG><a name="[5d4]"></a>_SetRotation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_dispstringinrectex.o(i._SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _SetRotation &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[5dc]"></a>_DrawGradient</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, gui_drawgradient.o(i._DrawGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
</UL>

<P><STRONG><a name="[62c]"></a>_Link</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gui_timer.o(i._Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Link
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
</UL>

<P><STRONG><a name="[e5]"></a>_OnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_timer.o(i._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> gui_timer.o(i.GUI_TIMER_Create)
</UL>
<P><STRONG><a name="[62e]"></a>_RemoveFromLinList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gui_timer.o(i._RemoveFromLinList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _RemoveFromLinList
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[62f]"></a>_Unlink</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_timer.o(i._Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[128]"></a>_Color2Index_0</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, guicc_0.o(i._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(i._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicc_0.o(i._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>_Color2IndexBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicc_8888.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>_Color2Index_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888.o(i._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_8888.o(i._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>_Index2ColorBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicc_8888.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[74a]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, lcd_rotatecw.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[749]"></a>_DrawBitmap</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, lcd_rotatecw.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine1BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetPfSetPixel
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[25]"></a>_DrawBitmapCW</STRONG> (Thumb, 456 bytes, Stack size 112 bytes, lcd_rotatecw.o(i._DrawBitmapCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _DrawBitmapCW &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>_Rect2TextRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_rotatecw.o(i._Rect2TextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Rect2TextRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[751]"></a>_TransformPoint</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd_rotatecw.o(i._TransformPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformRect
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[27]"></a>_TransformRect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_rotatecw.o(i._TransformRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _TransformRect &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[74e]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, guidev_32.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[74f]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, guidev_32.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[74d]"></a>_DrawBitLine32BPP_DDB</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, guidev_32.o(i._DrawBitLine32BPP_DDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DrawBitLine32BPP_DDB
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[750]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, guidev_32.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[12f]"></a>_DrawBitmap</STRONG> (Thumb, 666 bytes, Stack size 104 bytes, guidev_32.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine2BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP_DDB
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_32.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>_DrawVLine</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, guidev_32.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>_FillRect</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, guidev_32.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>_GetDevProp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_32.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_32.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>_SetPixelIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_32.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[74c]"></a>_XY2PTR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_32.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[135]"></a>_XorPixel</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, guidev_32.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_AddPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_USAGE_BM_Clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidev_usagebm.o(i._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>_CalcPositions</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, scrollbar_skin.o(i._CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _CalcPositions &rArr; WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound32
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__Rect2VRect
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(i._Create)
</UL>
<P><STRONG><a name="[29]"></a>_Create</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, scrollbar_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>_Paint</STRONG> (Thumb, 186 bytes, Stack size 120 bytes, scrollbar_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; _CalcPositions &rArr; WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>_DrawBackgroundH</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, scrollbar_skinflex.o(i._DrawBackgroundH))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _DrawBackgroundH &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[f5]"></a>_DrawBackgroundV</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, scrollbar_skinflex.o(i._DrawBackgroundV))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _DrawBackgroundV &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[743]"></a>_DrawFrame</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _DrawFrame &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundV
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundH
</UL>

<P><STRONG><a name="[fa]"></a>_DrawGraspH</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawGraspH))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _DrawGraspH &rArr; GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[f7]"></a>_DrawGraspV</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawGraspV))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _DrawGraspV &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[69c]"></a>_GetArrowPara</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, scrollbar_skinflex.o(i._GetArrowPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetArrowPara
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
</UL>

<P><STRONG><a name="[142]"></a>_DrawDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_simple.o(i._DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _DrawDown &rArr; _DrawDownRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>_DrawDownRect</STRONG> (Thumb, 50 bytes, Stack size 120 bytes, widget_effect_simple.o(i._DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _DrawDownRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>_DrawUp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_simple.o(i._DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _DrawUp &rArr; _DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>_DrawUpRect</STRONG> (Thumb, 50 bytes, Stack size 120 bytes, widget_effect_simple.o(i._DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.constdata)
</UL>
<P><STRONG><a name="[721]"></a>WM__ReleaseCapture</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_setcapture.o(i.WM__ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCapture
</UL>

<P><STRONG><a name="[621]"></a>LCD_ReadRectEx</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, lcd_readrect.o(i.LCD_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
</UL>

<P><STRONG><a name="[61b]"></a>_WriteToActiveAlpha</STRONG> (Thumb, 372 bytes, Stack size 136 bytes, guidev_writetoactivealpha.o(i._WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[20c]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[225]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; efs_write &rArr; efs_wr &rArr; efs_AllocBlock &rArr; efs_get_freeMem &rArr; falloc_read &rArr; fs_set_rtos_delay &rArr; osDelay &rArr; EvrRtxThreadError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[a0]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
